backing-dev.c:43:void bdi_lock_two(struct bdi_writeback *wb1, struct bdi_writeback *wb2)
backing-dev.c:60:static void bdi_debug_init(void)
backing-dev.c:65:static int bdi_debug_stats_show(struct seq_file *m, void *v)
backing-dev.c:120:static int bdi_debug_stats_open(struct inode *inode, struct file *file)
backing-dev.c:132:static void bdi_debug_register(struct backing_dev_info *bdi, const char *name)
backing-dev.c:139:static void bdi_debug_unregister(struct backing_dev_info *bdi)
backing-dev.c:145:static inline void bdi_debug_init(void)
backing-dev.c:148:static inline void bdi_debug_register(struct backing_dev_info *bdi, const char *name)
backing-dev.c:151:static inline void bdi_debug_unregister(struct backing_dev_info *bdi)
backing-dev.c:156:static ssize_t read_ahead_kb_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
backing-dev.c:185:static ssize_t min_ratio_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
backing-dev.c:203:static ssize_t max_ratio_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
backing-dev.c:221:static ssize_t stable_pages_required_show(struct device *dev, struct device_attribute *attr, char *page)
backing-dev.c:269:int bdi_has_dirty_io(struct backing_dev_info *bdi)
backing-dev.c:285:void bdi_wakeup_thread_delayed(struct backing_dev_info *bdi)
backing-dev.c:296:static void bdi_remove_from_list(struct backing_dev_info *bdi)
backing-dev.c:308:int bdi_register(struct backing_dev_info *bdi, struct device *parent, const char *fmt, ...)
backing-dev.c:336:int bdi_register_dev(struct backing_dev_info *bdi, dev_t dev)
backing-dev.c:345:static void bdi_wb_shutdown(struct backing_dev_info *bdi)
backing-dev.c:375:static void bdi_prune_sb(struct backing_dev_info *bdi)
backing-dev.c:387:void bdi_unregister(struct backing_dev_info *bdi)
backing-dev.c:408:static void bdi_wb_init(struct bdi_writeback *wb, struct backing_dev_info *bdi)
backing-dev.c:426:int bdi_init(struct backing_dev_info *bdi)
backing-dev.c:469:void bdi_destroy(struct backing_dev_info *bdi)
backing-dev.c:508:int bdi_setup_and_register(struct backing_dev_info *bdi, char *name, unsigned int cap)
backing-dev.c:535:void clear_bdi_congested(struct backing_dev_info *bdi, int sync)
backing-dev.c:549:void set_bdi_congested(struct backing_dev_info *bdi, int sync)
backing-dev.c:568:long congestion_wait(int sync, long timeout)
backing-dev.c:604:long wait_iff_congested(struct zone *zone, int sync, long timeout)
backing-dev.c:641:int pdflush_proc_obsolete(struct ctl_table *table, int write, void __user *buffer, size_t *lenp, loff_t *ppos)
balloon_compaction.c:22:struct balloon_dev_info *balloon_devinfo_alloc(void *balloon_dev_descriptor)
balloon_compaction.c:49:struct page *balloon_page_enqueue(struct balloon_dev_info *b_dev_info)
balloon_compaction.c:82:struct page *balloon_page_dequeue(struct balloon_dev_info *b_dev_info)
balloon_compaction.c:186:static inline void __isolate_balloon_page(struct page *page)
balloon_compaction.c:196:static inline void __putback_balloon_page(struct page *page)
balloon_compaction.c:213:bool balloon_page_isolate(struct page *page)
balloon_compaction.c:256:void balloon_page_putback(struct page *page)
bounce.c:49:static void bounce_copy_vec(struct bio_vec *to, unsigned char *vfrom)
bounce.c:71:static void *mempool_alloc_pages_isa(gfp_t gfp_mask, void *data)
bounce.c:80:int init_emergency_isa_pool(void)
bounce.c:98:static void copy_to_high_bio_irq(struct bio *to, struct bio *from)
bounce.c:125:static void bounce_end_io(struct bio *bio, mempool_t *pool, int err)
bounce.c:150:static void bounce_end_io_write(struct bio *bio, int err)
bounce.c:155:static void bounce_end_io_write_isa(struct bio *bio, int err)
bounce.c:161:static void __bounce_end_io_read(struct bio *bio, mempool_t *pool, int err)
bounce.c:171:static void bounce_end_io_read(struct bio *bio, int err)
bounce.c:176:static void bounce_end_io_read_isa(struct bio *bio, int err)
bounce.c:182:static int must_snapshot_stable_pages(struct request_queue *q, struct bio *bio)
bounce.c:193:static int must_snapshot_stable_pages(struct request_queue *q, struct bio *bio)
bounce.c:256:void blk_queue_bounce(struct request_queue *q, struct bio **bio_orig)
cleancache.c:112:struct cleancache_ops *cleancache_register_ops(struct cleancache_ops *ops)
cleancache.c:138:void __cleancache_init_fs(struct super_block *sb)
cleancache.c:158:void __cleancache_init_shared_fs(char *uuid, struct super_block *sb)
cleancache.c:207:static int get_poolid_from_fake(int fake_pool_id)
cleancache.c:228:int __cleancache_get_page(struct page *page)
cleancache.c:271:void __cleancache_put_page(struct page *page)
cleancache.c:340:void __cleancache_invalidate_inode(struct address_space *mapping)
cleancache.c:364:void __cleancache_invalidate_fs(struct super_block *sb)
compaction.c:22:static inline void count_compact_event(enum vm_event_item item)
compaction.c:27:static inline void count_compact_events(enum vm_event_item item, long delta)
compaction.c:55:static void map_pages(struct list_head *list)
compaction.c:65:static inline bool migrate_async_suitable(int migratetype)
compaction.c:86:static void __reset_isolation_suitable(struct zone *zone)
compaction.c:113:void reset_isolation_suitable(pg_data_t *pgdat)
compaction.c:174:static inline bool should_release_lock(spinlock_t *lock)
compaction.c:218:static bool suitable_migration_target(struct page *page)
compaction.c:397:static void acct_isolated(struct zone *zone, bool locked, struct compact_control *cc)
compaction.c:416:static bool too_many_isolated(struct zone *zone)
compaction.c:776:static void update_nr_listpages(struct compact_control *cc)
compaction.c:889:unsigned long compaction_suitable(struct zone *zone, int order)
compaction.c:932:static int compact_zone(struct zone *zone, struct compact_control *cc)
compaction.c:1102:static void __compact_pgdat(pg_data_t *pgdat, struct compact_control *cc)
compaction.c:1137:void compact_pgdat(pg_data_t *pgdat, int order)
compaction.c:1150:static void compact_node(int nid)
compaction.c:1161:static void compact_nodes(void)
compaction.c:1211:int compaction_register_node(struct node *node)
compaction.c:1216:void compaction_unregister_node(struct node *node)
debug-pagealloc.c:9:static inline void set_page_poison(struct page *page)
debug-pagealloc.c:14:static inline void clear_page_poison(struct page *page)
debug-pagealloc.c:19:static inline bool page_poison(struct page *page)
debug-pagealloc.c:24:static void poison_page(struct page *page)
debug-pagealloc.c:33:static void poison_pages(struct page *page, int n)
debug-pagealloc.c:41:static bool single_bit_flip(unsigned char a, unsigned char b)
debug-pagealloc.c:48:static void check_poison_mem(unsigned char *mem, size_t bytes)
debug-pagealloc.c:75:static void unpoison_page(struct page *page)
debug-pagealloc.c:88:static void unpoison_pages(struct page *page, int n)
debug-pagealloc.c:96:void kernel_map_pages(struct page *page, int numpages, int enable)
dmapool.c:196:static void pool_initialise_page(struct dma_pool *pool, struct dma_page *page)
dmapool.c:235:static inline int is_page_busy(struct dma_page *page)
dmapool.c:240:static void pool_free_page(struct dma_pool *pool, struct dma_page *page)
dmapool.c:260:void dma_pool_destroy(struct dma_pool *pool)
dmapool.c:388:void dma_pool_free(struct dma_pool *pool, void *vaddr, dma_addr_t dma)
dmapool.c:459:static void dmam_pool_release(struct device *dev, void *res)
dmapool.c:466:static int dmam_pool_match(struct device *dev, void *res, void *match_data)
dmapool.c:507:void dmam_pool_destroy(struct dma_pool *pool)
failslab.c:14:bool should_failslab(size_t size, gfp_t gfpflags, unsigned long cache_flags)
filemap.c:116:void __delete_from_page_cache(struct page *page)
filemap.c:161:void delete_from_page_cache(struct page *page)
filemap.c:180:static int sleep_on_page(void *word)
filemap.c:186:static int sleep_on_page_killable(void *word)
filemap.c:192:static int filemap_check_errors(struct address_space *mapping)
filemap.c:218:int __filemap_fdatawrite_range(struct address_space *mapping, loff_t start, loff_t end, int sync_mode)
filemap.c:235:static inline int __filemap_fdatawrite(struct address_space *mapping, int sync_mode)
filemap.c:240:int filemap_fdatawrite(struct address_space *mapping)
filemap.c:246:int filemap_fdatawrite_range(struct address_space *mapping, loff_t start, loff_t end)
filemap.c:259:int filemap_flush(struct address_space *mapping)
filemap.c:274:int filemap_fdatawait_range(struct address_space *mapping, loff_t start_byte, loff_t end_byte)
filemap.c:322:int filemap_fdatawait(struct address_space *mapping)
filemap.c:333:int filemap_write_and_wait(struct address_space *mapping)
filemap.c:368:int filemap_write_and_wait_range(struct address_space *mapping, loff_t lstart, loff_t lend)
filemap.c:404:int replace_page_cache_page(struct page *old, struct page *new, gfp_t gfp_mask)
filemap.c:455:int add_to_page_cache_locked(struct page *page, struct address_space *mapping, pgoff_t offset, gfp_t gfp_mask)
filemap.c:497:int add_to_page_cache_lru(struct page *page, struct address_space *mapping, pgoff_t offset, gfp_t gfp_mask)
filemap.c:509:struct page *__page_cache_alloc(gfp_t gfp)
filemap.c:539:static wait_queue_head_t *page_waitqueue(struct page *page)
filemap.c:546:static inline void wake_up_page(struct page *page, int bit)
filemap.c:551:void wait_on_page_bit(struct page *page, int bit_nr)
filemap.c:561:int wait_on_page_bit_killable(struct page *page, int bit_nr)
filemap.c:579:void add_page_wait_queue(struct page *page, wait_queue_t *waiter)
filemap.c:602:void unlock_page(struct page *page)
filemap.c:616:void end_page_writeback(struct page *page)
filemap.c:633:void __lock_page(struct page *page)
filemap.c:642:int __lock_page_killable(struct page *page)
filemap.c:651:int __lock_page_or_retry(struct page *page, struct mm_struct *mm, unsigned int flags)
filemap.c:690:struct page *find_get_page(struct address_space *mapping, pgoff_t offset)
filemap.c:744:struct page *find_lock_page(struct address_space *mapping, pgoff_t offset)
filemap.c:781:struct page *find_or_create_page(struct address_space *mapping, pgoff_t index, gfp_t gfp_mask)
filemap.c:826:unsigned find_get_pages(struct address_space *mapping, pgoff_t start, unsigned int nr_pages, struct page **pages)
filemap.c:892:unsigned find_get_pages_contig(struct address_space *mapping, pgoff_t index, unsigned int nr_pages, struct page **pages)
filemap.c:967:unsigned find_get_pages_tag(struct address_space *mapping, pgoff_t *index, int tag, unsigned int nr_pages, struct page **pages)
filemap.c:1038:struct page *grab_cache_page_nowait(struct address_space *mapping, pgoff_t index)
filemap.c:1072:static void shrink_readahead_size_eio(struct file *filp, struct file_ra_state *ra)
filemap.c:1089:static void do_generic_file_read(struct file *filp, loff_t *ppos, read_descriptor_t *desc)
filemap.c:1306:int file_read_actor(read_descriptor_t *desc, struct page *page, unsigned long offset, unsigned long size)
filemap.c:1354:int generic_segment_checks(const struct iovec *iov, unsigned long *nr_segs, size_t *count, int access_flags)
filemap.c:1391:ssize_t generic_file_aio_read(struct kiocb *iocb, const struct iovec *iov, unsigned long nr_segs, loff_t pos)
filemap.c:1489:static int page_cache_read(struct file *file, pgoff_t offset)
filemap.c:1519:static void do_sync_mmap_readahead(struct vm_area_struct *vma, struct file_ra_state *ra, struct file *file, pgoff_t offset)
filemap.c:1561:static void do_async_mmap_readahead(struct vm_area_struct *vma, struct file_ra_state *ra, struct file *file, struct page *page, pgoff_t offset)
filemap.c:1586:int filemap_fault(struct vm_area_struct *vma, struct vm_fault *vmf)
filemap.c:1707:int filemap_page_mkwrite(struct vm_area_struct *vma, struct vm_fault *vmf)
filemap.c:1742:int generic_file_mmap(struct file * file, struct vm_area_struct * vma)
filemap.c:1756:int generic_file_readonly_mmap(struct file *file, struct vm_area_struct *vma)
filemap.c:1763:int generic_file_mmap(struct file * file, struct vm_area_struct * vma)
filemap.c:1767:int generic_file_readonly_mmap(struct file * file, struct vm_area_struct * vma)
filemap.c:1880:struct page *read_cache_page_gfp(struct address_space *mapping, pgoff_t index, gfp_t gfp)
filemap.c:1906:static size_t __iovec_copy_from_user_inatomic(char *vaddr, const struct iovec *iov, size_t base, size_t bytes)
filemap.c:1932:size_t iov_iter_copy_from_user_atomic(struct page *page, struct iov_iter *i, unsigned long offset, size_t bytes)
filemap.c:1960:size_t iov_iter_copy_from_user(struct page *page, struct iov_iter *i, unsigned long offset, size_t bytes)
filemap.c:1980:void iov_iter_advance(struct iov_iter *i, size_t bytes)
filemap.c:2026:int iov_iter_fault_in_readable(struct iov_iter *i, size_t bytes)
filemap.c:2037:size_t iov_iter_single_seg_count(const struct iov_iter *i)
filemap.c:2129:int pagecache_write_begin(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned flags, struct page **pagep, void **fsdata)
filemap.c:2138:int pagecache_write_end(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata)
filemap.c:2147:ssize_t generic_file_direct_write(struct kiocb *iocb, const struct iovec *iov, unsigned long *nr_segs, loff_t pos, loff_t *ppos, size_t count, size_t ocount)
filemap.c:2218:struct page *grab_cache_page_write_begin(struct address_space *mapping, pgoff_t index, unsigned flags)
filemap.c:2252:static ssize_t generic_perform_write(struct file *file, struct iov_iter *i, loff_t pos)
filemap.c:2342:ssize_t generic_file_buffered_write(struct kiocb *iocb, const struct iovec *iov, unsigned long nr_segs, loff_t pos, loff_t *ppos, size_t count, ssize_t written)
filemap.c:2379:ssize_t __generic_file_aio_write(struct kiocb *iocb, const struct iovec *iov, unsigned long nr_segs, loff_t *ppos)
filemap.c:2486:ssize_t generic_file_aio_write(struct kiocb *iocb, const struct iovec *iov, unsigned long nr_segs, loff_t pos)
filemap.c:2526:int try_to_release_page(struct page *page, gfp_t gfp_mask)
filemap_xip.c:222:static int xip_file_fault(struct vm_area_struct *vma, struct vm_fault *vmf)
filemap_xip.c:312:int xip_file_mmap(struct file * file, struct vm_area_struct * vma)
frontswap.c:118:struct frontswap_ops *frontswap_register_ops(struct frontswap_ops *ops)
frontswap.c:146:void frontswap_writethrough(bool enable)
frontswap.c:155:void frontswap_tmem_exclusive_gets(bool enable)
frontswap.c:164:void __frontswap_init(unsigned type, unsigned long *map)
frontswap.c:216:int __frontswap_store(struct page *page)
frontswap.c:262:int __frontswap_load(struct page *page)
frontswap.c:292:void __frontswap_invalidate_page(unsigned type, pgoff_t offset)
frontswap.c:312:void __frontswap_invalidate_area(unsigned type)
frontswap.c:408:void frontswap_shrink(unsigned long target_pages)
frontswap.c:432:unsigned long frontswap_curr_pages(void)
highmem.c:53:unsigned int nr_free_highpages (void)
highmem.c:97:struct page *kmap_to_page(void *vaddr)
highmem.c:110:static void flush_all_zero_pkmaps(void)
highmem.c:153:void kmap_flush_unused(void)
highmem.c:218:void *kmap_high(struct page *page)
highmem.c:249:void *kmap_high_get(struct page *page)
highmem.c:271:void kunmap_high(struct page *page)
highmem.c:348:void *page_address(const struct page *page)
highmem.c:382:void set_page_address(struct page *page, void *virtual)
huge_memory.c:104:static int set_recommended_min_free_kbytes(void)
huge_memory.c:140:static int start_khugepaged(void)
huge_memory.c:169:static inline bool is_huge_zero_page(struct page *page)
huge_memory.c:174:static inline bool is_huge_zero_pmd(pmd_t pmd)
huge_memory.c:206:static void put_huge_zero_page(void)
huge_memory.c:613:static inline int hugepage_init_sysfs(struct kobject **hugepage_kobj)
huge_memory.c:618:static inline void hugepage_exit_sysfs(struct kobject *hugepage_kobj)
huge_memory.c:692:pmd_t maybe_pmd_mkwrite(pmd_t pmd, struct vm_area_struct *vma)
huge_memory.c:699:static inline pmd_t mk_huge_pmd(struct page *page, pgprot_t prot)
huge_memory.c:749:static inline gfp_t alloc_hugepage_gfpmask(int defrag, gfp_t extra_gfp)
huge_memory.c:1928:int split_huge_page_to_list(struct page *page, struct list_head *list)
huge_memory.c:2027:static inline void free_mm_slot(struct mm_slot *mm_slot)
huge_memory.c:2050:static inline int khugepaged_test_exit(struct mm_struct *mm)
huge_memory.c:2055:int __khugepaged_enter(struct mm_struct *mm)
huge_memory.c:2088:int khugepaged_enter_vma_merge(struct vm_area_struct *vma)
huge_memory.c:2108:void __khugepaged_exit(struct mm_struct *mm)
huge_memory.c:2140:static void release_pte_page(struct page *page)
huge_memory.c:2148:static void release_pte_pages(pte_t *pte, pte_t *_pte)
huge_memory.c:2258:static void khugepaged_alloc_sleep(void)
huge_memory.c:2267:static int khugepaged_find_target_node(void)
huge_memory.c:2292:static bool khugepaged_prealloc_page(struct page **hpage, bool *wait)
huge_memory.c:2342:static int khugepaged_find_target_node(void)
huge_memory.c:2373:static bool khugepaged_prealloc_page(struct page **hpage, bool *wait)
huge_memory.c:2395:static bool hugepage_vma_check(struct vm_area_struct *vma)
huge_memory.c:2606:static void collect_mm_slot(struct mm_slot *mm_slot)
huge_memory.c:2737:static int khugepaged_has_work(void)
huge_memory.c:2743:static int khugepaged_wait_event(void)
huge_memory.c:2749:static void khugepaged_do_scan(void)
huge_memory.c:2783:static void khugepaged_wait_work(void)
huge_memory.c:2801:static int khugepaged(void *none)
hugetlb.c:56:static inline void unlock_or_release_subpool(struct hugepage_subpool *spool)
hugetlb.c:68:struct hugepage_subpool *hugepage_new_subpool(long nr_blocks)
hugetlb.c:84:void hugepage_put_subpool(struct hugepage_subpool *spool)
hugetlb.c:154:static long region_add(struct list_head *head, long f, long t)
hugetlb.c:190:static long region_chg(struct list_head *head, long f, long t)
hugetlb.c:239:static long region_truncate(struct list_head *head, long end)
hugetlb.c:269:static long region_count(struct list_head *head, long f, long t)
hugetlb.c:314:unsigned long vma_kernel_pagesize(struct vm_area_struct *vma)
hugetlb.c:334:unsigned long vma_mmu_pagesize(struct vm_area_struct *vma)
hugetlb.c:396:static void resv_map_release(struct kref *ref)
hugetlb.c:414:static void set_vma_resv_map(struct vm_area_struct *vma, struct resv_map *map)
hugetlb.c:423:static void set_vma_resv_flags(struct vm_area_struct *vma, unsigned long flags)
hugetlb.c:431:static int is_vma_resv_set(struct vm_area_struct *vma, unsigned long flag)
hugetlb.c:439:void reset_vma_resv_huge_pages(struct vm_area_struct *vma)
hugetlb.c:447:static int vma_has_reserves(struct vm_area_struct *vma, long chg)
hugetlb.c:479:static void enqueue_huge_page(struct hstate *h, struct page *page)
hugetlb.c:508:static inline gfp_t htlb_alloc_mask(struct hstate *h)
hugetlb.c:573:static void update_and_free_page(struct hstate *h, struct page *page)
hugetlb.c:594:struct hstate *size_to_hstate(unsigned long size)
hugetlb.c:605:static void free_huge_page(struct page *page)
hugetlb.c:644:static void prep_new_huge_page(struct hstate *h, struct page *page, int nid)
hugetlb.c:656:static void prep_compound_gigantic_page(struct page *page, unsigned long order)
hugetlb.c:691:int PageHuge(struct page *page)
hugetlb.c:709:int PageHeadHuge(struct page *page_head)
hugetlb.c:722:pgoff_t __basepage_index(struct page *page)
hugetlb.c:768:static int next_node_allowed(int nid, nodemask_t *nodes_allowed)
hugetlb.c:778:static int get_valid_node_allowed(int nid, nodemask_t *nodes_allowed)
hugetlb.c:810:static int hstate_next_node_to_free(struct hstate *h, nodemask_t *nodes_allowed)
hugetlb.c:834:static int alloc_fresh_huge_page(struct hstate *h, nodemask_t *nodes_allowed)
hugetlb.c:898:static void dissolve_free_huge_page(struct page *page)
hugetlb.c:917:void dissolve_free_huge_pages(unsigned long start_pfn, unsigned long end_pfn)
hugetlb.c:1014:struct page *alloc_huge_page_node(struct hstate *h, int nid)
hugetlb.c:1033:static int gather_surplus_pages(struct hstate *h, int delta)
hugetlb.c:1306:static void prep_compound_huge_page(struct page *page, int order)
hugetlb.c:1836:static void hugetlb_unregister_node(struct node *node)
hugetlb.c:1860:static void hugetlb_unregister_all_nodes(void)
hugetlb.c:1880:static void hugetlb_register_node(struct node *node)
hugetlb.c:1912:static void hugetlb_register_all_nodes(void)
hugetlb.c:2156:void hugetlb_report_meminfo(struct seq_file *m)
hugetlb.c:2172:int hugetlb_report_node_meminfo(int nid, char *buf)
hugetlb.c:2184:void hugetlb_show_meminfo(void)
hugetlb.c:2200:unsigned long hugetlb_total_pages(void)
hugetlb.c:2210:static int hugetlb_acct_memory(struct hstate *h, long delta)
hugetlb.c:2251:static void hugetlb_vm_op_open(struct vm_area_struct *vma)
hugetlb.c:2267:static void resv_map_put(struct vm_area_struct *vma)
hugetlb.c:2276:static void hugetlb_vm_op_close(struct vm_area_struct *vma)
hugetlb.c:2307:static int hugetlb_vm_op_fault(struct vm_area_struct *vma, struct vm_fault *vmf)
hugetlb.c:2395:static int is_hugetlb_entry_migration(pte_t pte)
hugetlb.c:2408:static int is_hugetlb_entry_hwpoisoned(pte_t pte)
hugetlb.c:3231:void hugetlb_unreserve_pages(struct inode *inode, long offset, long freed)
hugetlb.c:3271:static int vma_shareable(struct vm_area_struct *vma, unsigned long addr)
hugetlb.c:3294:pte_t *huge_pmd_share(struct mm_struct *mm, unsigned long addr, pud_t *pud)
hugetlb.c:3353:int huge_pmd_unshare(struct mm_struct *mm, unsigned long *addr, pte_t *ptep)
hugetlb.c:3369:pte_t *huge_pmd_share(struct mm_struct *mm, unsigned long addr, pud_t *pud)
hugetlb.c:3402:pte_t *huge_pte_offset(struct mm_struct *mm, unsigned long addr)
hugetlb.c:3460:static int is_hugepage_on_freelist(struct page *hpage)
hugetlb.c:3477:int dequeue_hwpoisoned_huge_page(struct page *hpage)
hugetlb.c:3502:bool isolate_huge_page(struct page *page, struct list_head *list)
hugetlb.c:3513:void putback_active_hugepage(struct page *page)
hugetlb.c:3522:bool is_hugepage_active(struct page *page)
hugetlb_cgroup.c:37:struct hugetlb_cgroup *hugetlb_cgroup_from_css(struct cgroup_subsys_state *s)
hugetlb_cgroup.c:43:struct hugetlb_cgroup *hugetlb_cgroup_from_task(struct task_struct *task)
hugetlb_cgroup.c:48:static inline bool hugetlb_cgroup_is_root(struct hugetlb_cgroup *h_cg)
hugetlb_cgroup.c:59:static inline bool hugetlb_cgroup_have_usage(struct hugetlb_cgroup *h_cg)
hugetlb_cgroup.c:93:static void hugetlb_cgroup_css_free(struct cgroup_subsys_state *css)
hugetlb_cgroup.c:146:static void hugetlb_cgroup_css_offline(struct cgroup_subsys_state *css)
hugetlb_cgroup.c:316:static char *mem_fmt(char *buf, int size, unsigned long hsize)
hugetlb_cgroup.c:391:void hugetlb_cgroup_migrate(struct page *oldhpage, struct page *newhpage)
hwpoison-inject.c:13:static int hwpoison_inject(void *data, u64 val)
hwpoison-inject.c:62:static int hwpoison_unpoison(void *data, u64 val)
hwpoison-inject.c:73:static void pfn_inject_exit(void)
hwpoison-inject.c:79:static int pfn_inject_init(void)
internal.h:19:static inline void set_page_count(struct page *page, int v)
internal.h:28:static inline void set_page_refcounted(struct page *page)
internal.h:62:static inline void get_page_foll(struct page *page)
internal.h:166:static inline void munlock_vma_pages_all(struct vm_area_struct *vma)
internal.h:212:static inline void mlock_migrate_page(struct page *newpage, struct page *page)
internal.h:233:static inline int mlocked_vma_newpage(struct vm_area_struct *v, struct page *p)
internal.h:314:static inline void mminit_verify_pageflags_layout(void)
internal.h:323:static inline void mminit_verify_zonelist(void)
interval_tree.c:107:void anon_vma_interval_tree_verify(struct anon_vma_chain *node)
kmemcheck.c:7:void kmemcheck_alloc_shadow(struct page *page, int order, gfp_t flags, int node)
kmemcheck.c:38:void kmemcheck_free_shadow(struct page *page, int order)
kmemcheck.c:92:void kmemcheck_slab_free(struct kmem_cache *s, void *object, size_t size)
kmemleak.c:322:static bool color_white(const struct kmemleak_object *object)
kmemleak.c:328:static bool color_gray(const struct kmemleak_object *object)
kmemleak.c:339:static bool unreferenced_object(struct kmemleak_object *object)
kmemleak.c:375:static void dump_object_info(struct kmemleak_object *object)
kmemleak.c:429:static int get_object(struct kmemleak_object *object)
kmemleak.c:437:static void free_object_rcu(struct rcu_head *rcu)
kmemleak.c:462:static void put_object(struct kmemleak_object *object)
kmemleak.c:498:static int __save_stack_trace(unsigned long *trace)
kmemleak.c:601:static void __delete_object(struct kmemleak_object *object)
kmemleak.c:627:static void delete_object_full(unsigned long ptr)
kmemleak.c:648:static void delete_object_part(unsigned long ptr, size_t size)
kmemleak.c:682:static void __paint_it(struct kmemleak_object *object, int color)
kmemleak.c:689:static void paint_it(struct kmemleak_object *object, int color)
kmemleak.c:698:static void paint_ptr(unsigned long ptr, int color)
kmemleak.c:718:static void make_gray_object(unsigned long ptr)
kmemleak.c:727:static void make_black_object(unsigned long ptr)
kmemleak.c:736:static void add_scan_area(unsigned long ptr, size_t size, gfp_t gfp)
kmemleak.c:781:static void object_no_scan(unsigned long ptr)
kmemleak.c:837:static void early_alloc(struct early_log *log)
kmemleak.c:866:static void early_alloc_percpu(struct early_log *log)
kmemleak.c:1074:static bool update_checksum(struct kmemleak_object *object)
kmemleak.c:1089:static int scan_should_stop(void)
kmemleak.c:1179:static void scan_object(struct kmemleak_object *object)
kmemleak.c:1221:static void scan_gray_list(void)
kmemleak.c:1255:static void kmemleak_scan(void)
kmemleak.c:1395:static int kmemleak_scan_thread(void *arg)
kmemleak.c:1431:static void start_scan_thread(void)
kmemleak.c:1446:static void stop_scan_thread(void)
kmemleak.c:1459:static void *kmemleak_seq_start(struct seq_file *seq, loff_t *pos)
kmemleak.c:1485:static void *kmemleak_seq_next(struct seq_file *seq, void *v, loff_t *pos)
kmemleak.c:1507:static void kmemleak_seq_stop(struct seq_file *seq, void *v)
kmemleak.c:1524:static int kmemleak_seq_show(struct seq_file *seq, void *v)
kmemleak.c:1543:static int kmemleak_open(struct inode *inode, struct file *file)
kmemleak.c:1548:static int kmemleak_release(struct inode *inode, struct file *file)
kmemleak.c:1553:static int dump_str_object_info(const char *str)
kmemleak.c:1581:static void kmemleak_clear(void)
kmemleak.c:1685:static void kmemleak_do_cleanup(struct work_struct *work)
kmemleak.c:1708:static void kmemleak_disable(void)
kmemleak.c:1727:static int kmemleak_boot_config(char *str)
ksm.c:292:static inline void free_rmap_item(struct rmap_item *rmap_item)
ksm.c:304:static inline void free_stable_node(struct stable_node *stable_node)
ksm.c:316:static inline void free_mm_slot(struct mm_slot *mm_slot)
ksm.c:347:static inline bool ksm_test_exit(struct mm_struct *mm)
ksm.c:363:static int break_ksm(struct vm_area_struct *vma, unsigned long addr)
ksm.c:425:static void break_cow(struct rmap_item *rmap_item)
ksm.c:490:static inline int get_kpfn_nid(unsigned long kpfn)
ksm.c:495:static void remove_node_from_stable_tree(struct stable_node *stable_node)
ksm.c:613:static void remove_rmap_item_from_tree(struct rmap_item *rmap_item)
ksm.c:702:static int remove_stable_node(struct stable_node *stable_node)
ksm.c:740:static int remove_all_stable_nodes(void)
ksm.c:767:static int unmerge_and_remove_all_rmap_items(void)
ksm.c:828:static u32 calc_checksum(struct page *page)
ksm.c:837:static int memcmp_pages(struct page *page1, struct page *page2)
ksm.c:850:static inline int pages_identical(struct page *page1, struct page *page2)
ksm.c:980:static int page_trans_compound_anon_split(struct page *page)
ksm.c:1416:static void cmp_and_merge_page(struct page *page, struct rmap_item *rmap_item)
ksm.c:1694:static void ksm_do_scan(unsigned int scan_npages)
ksm.c:1709:static int ksmd_should_run(void)
ksm.c:1714:static int ksm_scan_thread(void *nothing)
ksm.c:1786:int __ksm_enter(struct mm_struct *mm)
ksm.c:1825:void __ksm_exit(struct mm_struct *mm)
ksm.c:1949:int try_to_unmap_ksm(struct page *page, enum ttu_flags flags)
ksm.c:2050:void ksm_migrate_page(struct page *newpage, struct page *oldpage)
ksm.c:2075:static int just_wait(void *word)
ksm.c:2081:static void wait_while_offlining(void)
ksm.c:2168:static void wait_while_offlining(void)
list_lru.c:14:bool list_lru_add(struct list_lru *lru, struct list_head *item)
list_lru.c:34:bool list_lru_del(struct list_lru *lru, struct list_head *item)
list_lru.c:54:unsigned long list_lru_count_node(struct list_lru *lru, int nid)
list_lru.c:68:unsigned long list_lru_walk_node(struct list_lru *lru, int nid, list_lru_walk_cb isolate, void *cb_arg, unsigned long *nr_to_walk)
list_lru.c:117:int list_lru_init(struct list_lru *lru)
list_lru.c:136:void list_lru_destroy(struct list_lru *lru)
maccess.c:21:long __probe_kernel_read(void *dst, const void *src, size_t size)
maccess.c:49:long __probe_kernel_write(void *dst, const void *src, size_t size)
madvise.c:28:static int madvise_need_mmap_write(int behavior)
madvise.c:344:static int madvise_hwpoison(int bhv, unsigned long start, unsigned long end)
memblock.c:59:static inline phys_addr_t memblock_cap_size(phys_addr_t base, phys_addr_t *size)
memblock.c:1150:static int memblock_debug_show(struct seq_file *m, void *private)
memblock.c:1172:static int memblock_debug_open(struct inode *inode, struct file *file)
memcontrol.c:338:static size_t memcg_size(void)
memcontrol.c:356:static inline void memcg_kmem_set_active(struct mem_cgroup *memcg)
memcontrol.c:361:static bool memcg_kmem_is_active(struct mem_cgroup *memcg)
memcontrol.c:366:static void memcg_kmem_set_activated(struct mem_cgroup *memcg)
memcontrol.c:371:static void memcg_kmem_clear_activated(struct mem_cgroup *memcg)
memcontrol.c:376:static void memcg_kmem_mark_dead(struct mem_cgroup *memcg)
memcontrol.c:387:static bool memcg_kmem_test_and_clear_dead(struct mem_cgroup *memcg)
memcontrol.c:421:static bool move_anon(void)
memcontrol.c:426:static bool move_file(void)
memcontrol.c:475:struct mem_cgroup *mem_cgroup_from_css(struct cgroup_subsys_state *s)
memcontrol.c:481:struct vmpressure *memcg_to_vmpressure(struct mem_cgroup *memcg)
memcontrol.c:488:struct cgroup_subsys_state *vmpressure_to_css(struct vmpressure *vmpr)
memcontrol.c:493:struct vmpressure *css_to_vmpressure(struct cgroup_subsys_state *css)
memcontrol.c:498:static inline bool mem_cgroup_is_root(struct mem_cgroup *memcg)
memcontrol.c:529:void sock_update_memcg(struct sock *sk)
memcontrol.c:563:void sock_release_memcg(struct sock *sk)
memcontrol.c:573:struct cg_proto *tcp_proto_cgroup(struct mem_cgroup *memcg)
memcontrol.c:582:static void disarm_sock_keys(struct mem_cgroup *memcg)
memcontrol.c:589:static void disarm_sock_keys(struct mem_cgroup *memcg)
memcontrol.c:634:static void disarm_kmem_keys(struct mem_cgroup *memcg)
memcontrol.c:647:static void disarm_kmem_keys(struct mem_cgroup *memcg)
memcontrol.c:652:static void disarm_static_keys(struct mem_cgroup *memcg)
memcontrol.c:667:struct cgroup_subsys_state *mem_cgroup_css(struct mem_cgroup *memcg)
memcontrol.c:752:static void mem_cgroup_update_tree(struct mem_cgroup *memcg, struct page *page)
memcontrol.c:787:static void mem_cgroup_remove_from_trees(struct mem_cgroup *memcg)
memcontrol.c:1018:static void memcg_check_events(struct mem_cgroup *memcg, struct page *page)
memcontrol.c:1046:struct mem_cgroup *mem_cgroup_from_task(struct task_struct *p)
memcontrol.c:1059:struct mem_cgroup *try_get_mem_cgroup_from_mm(struct mm_struct *mm)
memcontrol.c:1116:static void mem_cgroup_iter_invalidate(struct mem_cgroup *root)
memcontrol.c:1279:void __mem_cgroup_count_vm_event(struct mm_struct *mm, enum vm_event_item idx)
memcontrol.c:1355:struct lruvec *mem_cgroup_page_lruvec(struct page *page, struct zone *zone)
memcontrol.c:1480:int mem_cgroup_inactive_anon_is_low(struct lruvec *lruvec)
memcontrol.c:1519:int mem_cgroup_swappiness(struct mem_cgroup *memcg)
memcontrol.c:1546:static void mem_cgroup_start_move(struct mem_cgroup *memcg)
memcontrol.c:1553:static void mem_cgroup_end_move(struct mem_cgroup *memcg)
memcontrol.c:1577:static bool mem_cgroup_stolen(struct mem_cgroup *memcg)
memcontrol.c:1583:static bool mem_cgroup_under_move(struct mem_cgroup *memcg)
memcontrol.c:1605:static bool mem_cgroup_wait_acct_move(struct mem_cgroup *memcg)
memcontrol.c:1648:void mem_cgroup_print_oom_info(struct mem_cgroup *memcg, struct task_struct *p)
memcontrol.c:1739:static int mem_cgroup_count_children(struct mem_cgroup *memcg)
memcontrol.c:1752:static u64 mem_cgroup_get_limit(struct mem_cgroup *memcg)
memcontrol.c:1909:static void mem_cgroup_may_update_nodemask(struct mem_cgroup *memcg)
memcontrol.c:1946:int mem_cgroup_select_victim_node(struct mem_cgroup *memcg)
memcontrol.c:1975:static bool mem_cgroup_reclaimable(struct mem_cgroup *memcg, bool noswap)
memcontrol.c:2005:int mem_cgroup_select_victim_node(struct mem_cgroup *memcg)
memcontrol.c:2010:static bool mem_cgroup_reclaimable(struct mem_cgroup *memcg, bool noswap)
memcontrol.c:2081:static bool mem_cgroup_oom_trylock(struct mem_cgroup *memcg)
memcontrol.c:2120:static void mem_cgroup_oom_unlock(struct mem_cgroup *memcg)
memcontrol.c:2131:static void mem_cgroup_mark_under_oom(struct mem_cgroup *memcg)
memcontrol.c:2139:static void mem_cgroup_unmark_under_oom(struct mem_cgroup *memcg)
memcontrol.c:2179:static void memcg_wakeup_oom(struct mem_cgroup *memcg)
memcontrol.c:2186:static void memcg_oom_recover(struct mem_cgroup *memcg)
memcontrol.c:2192:static void mem_cgroup_oom(struct mem_cgroup *memcg, gfp_t mask, int order)
memcontrol.c:2233:bool mem_cgroup_oom_synchronize(bool handle)
memcontrol.c:2338:void __mem_cgroup_end_update_page_stat(struct page *page, unsigned long *flags)
memcontrol.c:2394:static bool consume_stock(struct mem_cgroup *memcg, unsigned int nr_pages)
memcontrol.c:2414:static void drain_stock(struct memcg_stock_pcp *stock)
memcontrol.c:2433:static void drain_local_stock(struct work_struct *dummy)
memcontrol.c:2455:static void refill_stock(struct mem_cgroup *memcg, unsigned int nr_pages)
memcontrol.c:2472:static void drain_all_stock(struct mem_cgroup *root_memcg, bool sync)
memcontrol.c:2515:static void drain_all_stock_async(struct mem_cgroup *root_memcg)
memcontrol.c:2527:static void drain_all_stock_sync(struct mem_cgroup *root_memcg)
memcontrol.c:2539:static void mem_cgroup_drain_pcp_counter(struct mem_cgroup *memcg, int cpu)
memcontrol.c:2857:struct mem_cgroup *try_get_mem_cgroup_from_page(struct page *page)
memcontrol.c:2959:static inline bool memcg_can_account_kmem(struct mem_cgroup *memcg)
memcontrol.c:2999:static int memcg_charge_kmem(struct mem_cgroup *memcg, gfp_t gfp, u64 size)
memcontrol.c:3040:static void memcg_uncharge_kmem(struct mem_cgroup *memcg, u64 size)
memcontrol.c:3062:void memcg_cache_list_add(struct mem_cgroup *memcg, struct kmem_cache *cachep)
memcontrol.c:3077:int memcg_cache_id(struct mem_cgroup *memcg)
memcontrol.c:3089:int memcg_update_cache_sizes(struct mem_cgroup *memcg)
memcontrol.c:3119:static size_t memcg_caches_array_size(int num_groups)
memcontrol.c:3139:void memcg_update_array_size(int num)
memcontrol.c:3147:int memcg_update_cache_size(struct kmem_cache *s, int num_groups)
memcontrol.c:3227:void memcg_release_cache(struct kmem_cache *s)
memcontrol.c:3277:static inline void memcg_stop_kmem_account(void)
memcontrol.c:3283:static inline void memcg_resume_kmem_account(void)
memcontrol.c:3289:static void kmem_cache_destroy_work_func(struct work_struct *w)
memcontrol.c:3322:void mem_cgroup_destroy_cache(struct kmem_cache *cachep)
memcontrol.c:3438:void kmem_cache_destroy_memcg_children(struct kmem_cache *s)
memcontrol.c:3489:static void mem_cgroup_destroy_all_caches(struct mem_cgroup *memcg)
memcontrol.c:3506:static void memcg_create_cache_work_func(struct work_struct *w)
memcontrol.c:3719:void __memcg_kmem_uncharge_pages(struct page *page, int order)
memcontrol.c:3751:static inline void mem_cgroup_destroy_all_caches(struct mem_cgroup *memcg)
memcontrol.c:3765:void mem_cgroup_split_huge_fixup(struct page *head)
memcontrol.c:4046:void mem_cgroup_cancel_charge_swapin(struct mem_cgroup *memcg)
memcontrol.c:4265:void mem_cgroup_uncharge_page(struct page *page)
memcontrol.c:4288:void mem_cgroup_uncharge_cache_page(struct page *page)
memcontrol.c:4303:void mem_cgroup_uncharge_start(void)
memcontrol.c:4314:void mem_cgroup_uncharge_end(void)
memcontrol.c:4372:void mem_cgroup_uncharge_swap(swp_entry_t ent)
memcontrol.c:4630:bool mem_cgroup_bad_page_check(struct page *page)
memcontrol.c:4638:void mem_cgroup_print_bad_page(struct page *page)
memcontrol.c:4931:static void mem_cgroup_reparent_charges(struct mem_cgroup *memcg)
memcontrol.c:4971:static inline bool memcg_has_children(struct mem_cgroup *memcg)
memcontrol.c:4991:static int mem_cgroup_force_empty(struct mem_cgroup *memcg)
memcontrol.c:5091:static inline u64 mem_cgroup_usage(struct mem_cgroup *memcg, bool swap)
memcontrol.c:5152:static int memcg_update_kmem_limit(struct cgroup_subsys_state *css, u64 val)
memcontrol.c:5200:static int memcg_propagate_kmem(struct mem_cgroup *memcg)
memcontrol.c:5318:static int mem_cgroup_reset(struct cgroup_subsys_state *css, unsigned int event)
memcontrol.c:5437:static inline void mem_cgroup_lru_names_not_uptodate(void)
memcontrol.c:5561:static void __mem_cgroup_threshold(struct mem_cgroup *memcg, bool swap)
memcontrol.c:5612:static void mem_cgroup_threshold(struct mem_cgroup *memcg)
memcontrol.c:5623:static int compare_thresholds(const void *a, const void *b)
memcontrol.c:5637:static int mem_cgroup_oom_notify_cb(struct mem_cgroup *memcg)
memcontrol.c:5646:static void mem_cgroup_oom_notify(struct mem_cgroup *memcg)
memcontrol.c:5900:static int memcg_init_kmem(struct mem_cgroup *memcg, struct cgroup_subsys *ss)
memcontrol.c:5912:static void memcg_destroy_kmem(struct mem_cgroup *memcg)
memcontrol.c:5917:static void kmem_cgroup_css_offline(struct mem_cgroup *memcg)
memcontrol.c:5951:static int memcg_init_kmem(struct mem_cgroup *memcg, struct cgroup_subsys *ss)
memcontrol.c:5956:static void memcg_destroy_kmem(struct mem_cgroup *memcg)
memcontrol.c:5960:static void kmem_cgroup_css_offline(struct mem_cgroup *memcg)
memcontrol.c:6104:static int alloc_mem_cgroup_per_zone_info(struct mem_cgroup *memcg, int node)
memcontrol.c:6134:static void free_mem_cgroup_per_zone_info(struct mem_cgroup *memcg, int node)
memcontrol.c:6178:static void __mem_cgroup_free(struct mem_cgroup *memcg)
memcontrol.c:6211:struct mem_cgroup *parent_mem_cgroup(struct mem_cgroup *memcg)
memcontrol.c:6328:static void mem_cgroup_invalidate_reclaim_iterators(struct mem_cgroup *memcg)
memcontrol.c:6343:static void mem_cgroup_css_offline(struct cgroup_subsys_state *css)
memcontrol.c:6355:static void mem_cgroup_css_free(struct cgroup_subsys_state *css)
memcontrol.c:6402:static int mem_cgroup_do_precharge(unsigned long count)
memcontrol.c:6691:static int mem_cgroup_precharge_mc(struct mm_struct *mm)
memcontrol.c:6701:static void __mem_cgroup_clear_mc(void)
memcontrol.c:6746:static void mem_cgroup_clear_mc(void)
memcontrol.c:6919:static void mem_cgroup_move_charge(struct mm_struct *mm)
memcontrol.c:6992:static void mem_cgroup_bind(struct cgroup_subsys_state *root_css)
memory-failure.c:79:static int hwpoison_filter_dev(struct page *p)
memory-failure.c:109:static int hwpoison_filter_flags(struct page *p)
memory-failure.c:134:static int hwpoison_filter_task(struct page *p)
memory-failure.c:164:int hwpoison_filter(struct page *p)
memory-failure.c:181:int hwpoison_filter(struct page *p)
memory-failure.c:234:void shake_page(struct page *p, int access)
memory-failure.c:387:static int task_early_kill(struct task_struct *tsk)
memory-failure.c:472:static void collect_procs(struct page *page, struct list_head *tokill)
memory-failure.c:513:static int delete_from_lru_cache(struct page *p)
memory-failure.c:536:static int me_kernel(struct page *p, unsigned long pfn)
memory-failure.c:544:static int me_unknown(struct page *p, unsigned long pfn)
memory-failure.c:553:static int me_pagecache_clean(struct page *p, unsigned long pfn)
memory-failure.c:618:static int me_pagecache_dirty(struct page *p, unsigned long pfn)
memory-failure.c:684:static int me_swapcache_dirty(struct page *p, unsigned long pfn)
memory-failure.c:696:static int me_swapcache_clean(struct page *p, unsigned long pfn)
memory-failure.c:712:static int me_huge_page(struct page *p, unsigned long pfn)
memory-failure.c:821:static void action_result(unsigned long pfn, char *msg, int result)
memory-failure.c:995:static void set_page_hwpoison_huge_page(struct page *hpage)
memory-failure.c:1003:static void clear_page_hwpoison_huge_page(struct page *hpage)
memory-failure.c:1029:int memory_failure(unsigned long pfn, int trapno, int flags)
memory-failure.c:1270:void memory_failure_queue(unsigned long pfn, int trapno, int flags)
memory-failure.c:1292:static void memory_failure_work_func(struct work_struct *work)
memory-failure.c:1341:int unpoison_memory(unsigned long pfn)
memory-failure.c:1428:static int __get_any_page(struct page *p, unsigned long pfn, int flags)
memory-failure.c:1458:static int get_any_page(struct page *page, unsigned long pfn, int flags)
memory-failure.c:1482:static int soft_offline_huge_page(struct page *page, int flags)
memory-failure.c:1532:static int __soft_offline_page(struct page *page, int flags)
memory-failure.c:1641:int soft_offline_page(struct page *page, int flags)
memory.c:132:void sync_mm_rss(struct mm_struct *mm)
memory.c:145:static void add_mm_counter_fast(struct mm_struct *mm, int member, int val)
memory.c:159:static void check_sync_rss_stat(struct task_struct *task)
memory.c:171:static void check_sync_rss_stat(struct task_struct *task)
memory.c:179:static int tlb_next_batch(struct mmu_gather *tlb)
memory.c:212:void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm, unsigned long start, unsigned long end)
memory.c:233:void tlb_flush_mmu(struct mmu_gather *tlb)
memory.c:256:void tlb_finish_mmu(struct mmu_gather *tlb, unsigned long start, unsigned long end)
memory.c:278:int __tlb_remove_page(struct mmu_gather *tlb, struct page *page)
memory.c:304:static void tlb_remove_table_smp_sync(void *arg)
memory.c:309:static void tlb_remove_table_one(void *table)
memory.c:322:static void tlb_remove_table_rcu(struct rcu_head *head)
memory.c:335:void tlb_table_flush(struct mmu_gather *tlb)
memory.c:345:void tlb_remove_table(struct mmu_gather *tlb, void *table)
memory.c:590:int __pte_alloc_kernel(pmd_t *pmd, unsigned long address)
memory.c:610:static inline void init_rss_vec(int *rss)
memory.c:615:static inline void add_mm_rss_vec(struct mm_struct *mm, int *rss)
memory.c:690:static inline bool is_cow_mapping(vm_flags_t flags)
memory.c:1638:static inline int stack_guard_page(struct vm_area_struct *vma, unsigned long addr)
memory.c:2040:struct page *get_dump_page(unsigned long addr)
memory.c:2400:int vm_iomap_memory(struct vm_area_struct *vma, phys_addr_t start, unsigned long len)
memory.c:2560:static inline void cow_user_page(struct page *dst, struct page *src, unsigned long va, struct vm_area_struct *vma)
memory.c:3184:static inline int check_stack_guard_page(struct vm_area_struct *vma, unsigned long address)
memory.c:3825:int __pud_alloc(struct mm_struct *mm, pgd_t *pgd, unsigned long address)
memory.c:3848:int __pmd_alloc(struct mm_struct *mm, pud_t *pud, unsigned long address)
memory.c:3891:struct vm_area_struct *get_gate_vma(struct mm_struct *mm)
memory.c:3900:int in_gate_area_no_mm(unsigned long addr)
memory.c:4143:void print_vma_addr(char *prefix, unsigned long ip)
memory.c:4176:void might_fault(void)
memory.c:4275:bool ptlock_alloc(struct page *page)
memory.c:4286:void ptlock_free(struct page *page)
memory_hotplug.c:53:void lock_memory_hotplug(void)
memory_hotplug.c:58:void unlock_memory_hotplug(void)
memory_hotplug.c:83:static void release_memory_resource(struct resource *res)
memory_hotplug.c:102:void put_page_bootmem(struct page *page)
memory_hotplug.c:120:static void register_page_bootmem_info_section(unsigned long start_pfn)
memory_hotplug.c:154:static void register_page_bootmem_info_section(unsigned long start_pfn)
memory_hotplug.c:180:void register_page_bootmem_info_node(struct pglist_data *pgdat)
memory_hotplug.c:644:static void __remove_zone(struct zone *zone, unsigned long start_pfn)
memory_hotplug.c:659:static int __remove_section(struct zone *zone, struct mem_section *ms)
memory_hotplug.c:727:int set_online_page_callback(online_page_callback_t callback)
memory_hotplug.c:744:int restore_online_page_callback(online_page_callback_t callback)
memory_hotplug.c:761:void __online_page_set_limits(struct page *page)
memory_hotplug.c:766:void __online_page_increment_counters(struct page *page)
memory_hotplug.c:772:void __online_page_free(struct page *page)
memory_hotplug.c:778:static void generic_online_page(struct page *page)
memory_hotplug.c:806:static bool can_online_high_movable(struct zone *zone)
memory_hotplug.c:812:static bool can_online_high_movable(struct zone *zone)
memory_hotplug.c:881:static void node_states_set_node(int node, struct memory_notify *arg)
memory_hotplug.c:1038:static void rollback_node_hotadd(int nid, pg_data_t *pgdat)
memory_hotplug.c:1051:int try_online_node(int nid)
memory_hotplug.c:1081:static int check_hotplug_memory_range(u64 start, u64 size)
memory_hotplug.c:1174:static inline int pageblock_free(struct page *page)
memory_hotplug.c:1198:int is_mem_section_removable(unsigned long start_pfn, unsigned long nr_pages)
memory_hotplug.c:1217:static int test_pages_in_a_zone(unsigned long start_pfn, unsigned long end_pfn)
memory_hotplug.c:1396:static bool can_offline_normal(struct zone *zone, unsigned long nr_pages)
memory_hotplug.c:1402:static bool can_offline_normal(struct zone *zone, unsigned long nr_pages)
memory_hotplug.c:1533:static void node_states_clear_node(int node, struct memory_notify *arg)
memory_hotplug.c:1690:int offline_pages(unsigned long start_pfn, unsigned long nr_pages)
memory_hotplug.c:1746:static int check_memblock_offlined_cb(struct memory_block *mem, void *arg)
memory_hotplug.c:1763:static int check_cpu_on_node(pg_data_t *pgdat)
memory_hotplug.c:1779:static void unmap_cpu_on_node(pg_data_t *pgdat)
memory_hotplug.c:1790:static int check_and_unmap_cpu_on_node(pg_data_t *pgdat)
memory_hotplug.c:1815:void try_offline_node(int nid)
mempolicy.c:165:static int is_valid_nodemask(const nodemask_t *nodemask)
mempolicy.c:170:static inline int mpol_store_user_nodemask(const struct mempolicy *pol)
mempolicy.c:183:static int mpol_new_interleave(struct mempolicy *pol, const nodemask_t *nodes)
mempolicy.c:191:static int mpol_new_preferred(struct mempolicy *pol, const nodemask_t *nodes)
mempolicy.c:202:static int mpol_new_bind(struct mempolicy *pol, const nodemask_t *nodes)
mempolicy.c:301:void __mpol_put(struct mempolicy *p)
mempolicy.c:448:void mpol_rebind_mm(struct mm_struct *mm, nodemask_t *new)
mempolicy.c:816:void mpol_fix_fork_child_flag(struct task_struct *p)
mempolicy.c:824:static void mpol_set_task_struct_flag(void)
mempolicy.c:885:static void get_policy_nodemask(struct mempolicy *p, nodemask_t *nodes)
mempolicy.c:907:static int lookup_node(struct mm_struct *mm, unsigned long addr)
mempolicy.c:1685:bool vma_policy_mof(struct task_struct *task, struct vm_area_struct *vma)
mempolicy.c:1709:static int apply_policy_zone(struct mempolicy *policy, enum zone_type zone)
mempolicy.c:1733:static nodemask_t *policy_nodemask(gfp_t gfp, struct mempolicy *policy)
mempolicy.c:1771:static unsigned interleave_nodes(struct mempolicy *policy)
mempolicy.c:1793:unsigned slab_node(void)
mempolicy.c:1880:int node_random(const nodemask_t *maskp)
mempolicy.c:1943:bool init_nodemask_of_mempolicy(nodemask_t *mask)
mempolicy.c:2111:struct page *alloc_pages_current(gfp_t gfp, unsigned order)
mempolicy.c:2141:int vma_dup_policy(struct vm_area_struct *src, struct vm_area_struct *dst)
mempolicy.c:2163:struct mempolicy *__mpol_dup(struct mempolicy *old)
mempolicy.c:2192:bool __mpol_equal(struct mempolicy *a, struct mempolicy *b)
mempolicy.c:2260:static void sp_insert(struct shared_policy *sp, struct sp_node *new)
mempolicy.c:2301:static void sp_free(struct sp_node *n)
mempolicy.c:2308:static bool numa_migrate_deferred(struct task_struct *p, int last_cpupid)
mempolicy.c:2321:static inline void defer_numa_migrate(struct task_struct *p)
mempolicy.c:2326:static inline bool numa_migrate_deferred(struct task_struct *p, int last_cpupid)
mempolicy.c:2331:static inline void defer_numa_migrate(struct task_struct *p)
mempolicy.c:2353:int mpol_misplaced(struct page *page, struct vm_area_struct *vma, unsigned long addr)
mempolicy.c:2466:static void sp_delete(struct shared_policy *sp, struct sp_node *n)
mempolicy.c:2578:void mpol_shared_policy_init(struct shared_policy *sp, struct mempolicy *mpol)
mempolicy.c:2642:void mpol_free_shared_policy(struct shared_policy *p)
mempolicy.c:2758:void numa_default_policy(void)
mempolicy.c:2791:int mpol_parse_str(char *str, struct mempolicy **mpol)
mempolicy.c:2924:void mpol_to_str(char *buffer, int maxlen, struct mempolicy *pol)
mempool.c:19:static void add_element(mempool_t *pool, void *element)
mempool.c:25:static void *remove_element(mempool_t *pool)
mempool.c:39:void mempool_destroy(mempool_t *pool)
mempool.c:64:mempool_t *mempool_create(int min_nr, mempool_alloc_t *alloc_fn, mempool_free_t *free_fn, void *pool_data)
mempool.c:70:mempool_t *mempool_create_node(int min_nr, mempool_alloc_t *alloc_fn, mempool_free_t *free_fn, void *pool_data, gfp_t gfp_mask, int node_id)
mempool.c:121:int mempool_resize(mempool_t *pool, int new_min_nr, gfp_t gfp_mask)
mempool.c:263:void mempool_free(void *element, mempool_t *pool)
mempool.c:321:void *mempool_alloc_slab(gfp_t gfp_mask, void *pool_data)
mempool.c:328:void mempool_free_slab(void *element, void *pool_data)
mempool.c:339:void *mempool_kmalloc(gfp_t gfp_mask, void *pool_data)
mempool.c:346:void mempool_kfree(void *element, void *pool_data)
mempool.c:356:void *mempool_alloc_pages(gfp_t gfp_mask, void *pool_data)
mempool.c:363:void mempool_free_pages(void *element, void *pool_data)
migrate.c:53:int migrate_prep(void)
migrate.c:67:int migrate_prep_local(void)
migrate.c:78:void putback_lru_pages(struct list_head *l)
migrate.c:98:void putback_movable_pages(struct list_head *l)
migrate.c:200:static void remove_migration_ptes(struct page *old, struct page *new)
migrate.c:468:static void copy_huge_page(struct page *dst, struct page *src)
migrate.c:497:void migrate_page_copy(struct page *newpage, struct page *page)
migrate.c:661:static int writeout(struct address_space *mapping, struct page *page)
migrate.c:1582:bool migrate_ratelimited(int node)
migrate.c:1597:bool numamigrate_update_ratelimit(pg_data_t *pgdat, unsigned long nr_pages)
migrate.c:1621:int numamigrate_isolate_page(pg_data_t *pgdat, struct page *page)
migrate.c:1659:bool pmd_trans_migrating(pmd_t pmd)
migrate.c:1665:void wait_migrate_huge_page(struct anon_vma *anon_vma, pmd_t *pmd)
mincore.c:217:static long do_mincore(unsigned long addr, unsigned long pages, unsigned char *vec)
mlock.c:27:int can_do_mlock(void)
mlock.c:57:void clear_page_mlock(struct page *page)
mlock.c:80:void mlock_vma_page(struct page *page)
mlock.c:99:static void __munlock_isolated_page(struct page *page)
mlock.c:126:static void __munlock_isolation_failed(struct page *page)
mlock.c:152:unsigned int munlock_vma_page(struct page *page)
mlock.c:276:static void __putback_lru_fast(struct pagevec *pvec, int pgrescued)
mlock.c:297:static void __munlock_pagevec(struct pagevec *pvec, struct zone *zone)
mlock.c:587:static int do_mlock(unsigned long start, size_t len, int on)
mlock.c:645:int __mm_populate(unsigned long start, unsigned long len, int ignore_errors)
mlock.c:743:static int do_mlockall(int flags)
mlock.c:816:int user_shm_lock(size_t size, struct user_struct *user)
mlock.c:838:void user_shm_unlock(size_t size, struct user_struct *user)
mm_init.c:24:void mminit_verify_zonelist(void)
mmap.c:79:pgprot_t vm_get_page_prot(unsigned long vm_flags)
mmap.c:106:unsigned long vm_memory_committed(void)
mmap.c:128:int __vm_enough_memory(struct mm_struct *mm, long pages, int cap_sys_admin)
mmap.c:228:void unlink_file_vma(struct vm_area_struct *vma)
mmap.c:330:static long vma_compute_subtree_gap(struct vm_area_struct *vma)
mmap.c:352:static int browse_rb(struct rb_root *root)
mmap.c:395:static void validate_mm_rb(struct rb_root *root, struct vm_area_struct *ignore)
mmap.c:407:void validate_mm(struct mm_struct *mm)
mmap.c:452:static void vma_gap_update(struct vm_area_struct *vma)
mmap.c:470:static void vma_rb_erase(struct vm_area_struct *vma, struct rb_root *root)
mmap.c:604:static void __vma_link_file(struct vm_area_struct *vma)
mmap.c:661:static void __insert_vm_struct(struct mm_struct *mm, struct vm_area_struct *vma)
mmap.c:1080:static int anon_vma_compatible(struct vm_area_struct *a, struct vm_area_struct *b)
mmap.c:1130:struct anon_vma *find_mergeable_anon_vma(struct vm_area_struct *vma)
mmap.c:1433:int vma_wants_writenotify(struct vm_area_struct *vma)
mmap.c:1463:static inline int accountable_mapping(struct file *file, vm_flags_t vm_flags)
mmap.c:1637:unsigned long unmapped_area(struct vm_unmapped_area_info *info)
mmap.c:1739:unsigned long unmapped_area_topdown(struct vm_unmapped_area_info *info)
mmap.c:1971:struct vm_area_struct *find_vma(struct mm_struct *mm, unsigned long addr)
mmap.c:2034:static int acct_stack_growth(struct vm_area_struct *vma, unsigned long size, unsigned long grow)
mmap.c:2084:int expand_upwards(struct vm_area_struct *vma, unsigned long address)
mmap.c:2236:int expand_stack(struct vm_area_struct *vma, unsigned long address)
mmap.c:2265:int expand_stack(struct vm_area_struct *vma, unsigned long address)
mmap.c:2307:static void remove_vma_list(struct mm_struct *mm, struct vm_area_struct *vma)
mmap.c:2460:int do_munmap(struct mm_struct *mm, unsigned long start, size_t len)
mmap.c:2542:int vm_munmap(unsigned long start, size_t len)
mmap.c:2560:static inline void verify_mm_writelocked(struct mm_struct *mm)
mmap.c:2665:unsigned long vm_brk(unsigned long addr, unsigned long len)
mmap.c:2682:void exit_mmap(struct mm_struct *mm)
mmap.c:2735:int insert_vm_struct(struct mm_struct *mm, struct vm_area_struct *vma)
mmap.c:2850:int may_expand_vm(struct mm_struct *mm, unsigned long npages)
mmap.c:2893:static void special_mapping_close(struct vm_area_struct *vma)
mmap.c:2950:static void vm_lock_anon_vma(struct mm_struct *mm, struct anon_vma *anon_vma)
mmap.c:2973:static void vm_lock_mapping(struct mm_struct *mm, struct address_space *mapping)
mmap.c:3023:int mm_take_all_locks(struct mm_struct *mm)
mmap.c:3054:static void vm_unlock_anon_vma(struct anon_vma *anon_vma)
mmap.c:3076:static void vm_unlock_mapping(struct address_space *mapping)
mmap.c:3094:void mm_drop_all_locks(struct mm_struct *mm)
mmap.c:3134:static int init_user_reserve(void)
mmap.c:3155:static int init_admin_reserve(void)
mmu_context.c:20:void use_mm(struct mm_struct *mm)
mmu_context.c:48:void unuse_mm(struct mm_struct *mm)
mmu_notifier.c:37:void __mmu_notifier_release(struct mm_struct *mm)
mmu_notifier.c:253:int mmu_notifier_register(struct mmu_notifier *mn, struct mm_struct *mm)
mmu_notifier.c:263:int __mmu_notifier_register(struct mmu_notifier *mn, struct mm_struct *mm)
mmu_notifier.c:270:void __mmu_notifier_mm_destroy(struct mm_struct *mm)
mmu_notifier.c:287:void mmu_notifier_unregister(struct mmu_notifier *mn, struct mm_struct *mm)
mmzone.c:12:struct pglist_data *first_online_pgdat(void)
mmzone.c:17:struct pglist_data *next_online_pgdat(struct pglist_data *pgdat)
mmzone.c:29:struct zone *next_zone(struct zone *zone)
mmzone.c:45:static inline int zref_in_nodemask(struct zoneref *zref, nodemask_t *nodes)
mmzone.c:90:void lruvec_init(struct lruvec *lruvec)
mmzone.c:101:int page_cpupid_xchg_last(struct page *page, int cpupid)
mprotect.c:32:static inline pgprot_t pgprot_modify(pgprot_t oldprot, pgprot_t newprot)
mremap.c:31:static pmd_t *get_old_pmd(struct mm_struct *mm, unsigned long addr)
mremap.c:73:static pte_t move_soft_dirty_pte(pte_t pte)
mremap.c:448:static int vma_expandable(struct vm_area_struct *vma, unsigned long delta)
nommu.c:79:unsigned long vm_memory_committed(void)
nommu.c:102:unsigned int kobjsize(const void *objp)
nommu.c:233:void vfree(const void *addr)
nommu.c:239:void *__vmalloc(unsigned long size, gfp_t gfp_mask, pgprot_t prot)
nommu.c:249:void *vmalloc_user(unsigned long size)
nommu.c:269:struct page *vmalloc_to_page(const void *addr)
nommu.c:275:unsigned long vmalloc_to_pfn(const void *addr)
nommu.c:281:long vread(char *buf, char *addr, unsigned long count)
nommu.c:291:long vwrite(char *buf, char *addr, unsigned long count)
nommu.c:312:void *vmalloc(unsigned long size)
nommu.c:330:void *vzalloc(unsigned long size)
nommu.c:348:void *vmalloc_node(unsigned long size, int node)
nommu.c:366:void *vzalloc_node(unsigned long size, int node)
nommu.c:388:void *vmalloc_exec(unsigned long size)
nommu.c:400:void *vmalloc_32(unsigned long size)
nommu.c:416:void *vmalloc_32_user(unsigned long size)
nommu.c:426:void *vmap(struct page **pages, unsigned int count, unsigned long flags, pgprot_t prot)
nommu.c:433:void vunmap(const void *addr)
nommu.c:439:void *vm_map_ram(struct page **pages, unsigned int count, int node, pgprot_t prot)
nommu.c:446:void vm_unmap_ram(const void *mem, unsigned int count)
nommu.c:452:void vm_unmap_aliases(void)
nommu.c:477:struct vm_struct *alloc_vm_area(size_t size, pte_t **ptes)
nommu.c:484:void free_vm_area(struct vm_struct *area)
nommu.c:571:static void validate_nommu_regions(void)
nommu.c:579:static void add_nommu_region(struct vm_region *region)
nommu.c:610:static void delete_nommu_region(struct vm_region *region)
nommu.c:622:static void free_page_series(unsigned long from, unsigned long to)
nommu.c:642:static void __put_nommu_region(struct vm_region *region)
nommu.c:672:static void put_nommu_region(struct vm_region *region)
nommu.c:681:static void protect_vma(struct vm_area_struct *vma, unsigned long flags)
nommu.c:700:static void add_vma_to_mm(struct mm_struct *mm, struct vm_area_struct *vma)
nommu.c:768:static void delete_vma_from_mm(struct vm_area_struct *vma)
nommu.c:807:static void delete_vma(struct mm_struct *mm, struct vm_area_struct *vma)
nommu.c:822:struct vm_area_struct *find_vma(struct mm_struct *mm, unsigned long addr)
nommu.c:850:struct vm_area_struct *find_extend_vma(struct mm_struct *mm, unsigned long addr)
nommu.c:859:int expand_stack(struct vm_area_struct *vma, unsigned long address)
nommu.c:1117:static int do_mmap_shared_file(struct vm_area_struct *vma)
nommu.c:1644:int do_munmap(struct mm_struct *mm, unsigned long start, size_t len)
nommu.c:1720:int vm_munmap(unsigned long addr, size_t len)
nommu.c:1740:void exit_mmap(struct mm_struct *mm)
nommu.c:1761:unsigned long vm_brk(unsigned long addr, unsigned long len)
nommu.c:1843:int vm_iomap_memory(struct vm_area_struct *vma, phys_addr_t start, unsigned long len)
nommu.c:1897:int __vm_enough_memory(struct mm_struct *mm, long pages, int cap_sys_admin)
nommu.c:1975:int in_gate_area_no_mm(unsigned long addr)
nommu.c:1980:int filemap_fault(struct vm_area_struct *vma, struct vm_fault *vmf)
nommu.c:2047:int access_process_vm(struct task_struct *tsk, unsigned long addr, void *buf, int len, int write)
oom_kill.c:98:struct task_struct *find_lock_task_mm(struct task_struct *p)
oom_kill.c:346:static void dump_tasks(const struct mem_cgroup *memcg, const nodemask_t *nodemask)
oom_kill.c:534:int register_oom_notifier(struct notifier_block *nb)
oom_kill.c:540:int unregister_oom_notifier(struct notifier_block *nb)
oom_kill.c:551:int try_set_zonelist_oom(struct zonelist *zonelist, gfp_t gfp_mask)
oom_kill.c:584:void clear_zonelist_oom(struct zonelist *zonelist, gfp_t gfp_mask)
oom_kill.c:679:void pagefault_out_of_memory(void)
page-writeback.c:260:void global_dirty_limits(unsigned long *pbackground, unsigned long *pdirty)
page-writeback.c:350:bool zone_dirty_ok(struct zone *zone)
page-writeback.c:359:int dirty_background_ratio_handler(struct ctl_table *table, int write, void __user *buffer, size_t *lenp, loff_t *ppos)
page-writeback.c:369:int dirty_background_bytes_handler(struct ctl_table *table, int write, void __user *buffer, size_t *lenp, loff_t *ppos)
page-writeback.c:379:int dirty_ratio_handler(struct ctl_table *table, int write, void __user *buffer, size_t *lenp, loff_t *ppos)
page-writeback.c:392:int dirty_bytes_handler(struct ctl_table *table, int write, void __user *buffer, size_t *lenp, loff_t *ppos)
page-writeback.c:418:static inline void __bdi_writeout_inc(struct backing_dev_info *bdi)
page-writeback.c:436:void bdi_writeout_inc(struct backing_dev_info *bdi)
page-writeback.c:449:static void bdi_writeout_fraction(struct backing_dev_info *bdi, long *numerator, long *denominator)
page-writeback.c:458:static void writeout_period(unsigned long t)
page-writeback.c:483:int bdi_set_min_ratio(struct backing_dev_info *bdi, unsigned int min_ratio)
page-writeback.c:504:int bdi_set_max_ratio(struct backing_dev_info *bdi, unsigned max_ratio)
page-writeback.c:556:unsigned long bdi_dirty_limit(struct backing_dev_info *bdi, unsigned long dirty)
page-writeback.c:854:static void bdi_update_write_bandwidth(struct backing_dev_info *bdi, unsigned long elapsed, unsigned long written)
page-writeback.c:900:static void update_dirty_limit(unsigned long thresh, unsigned long dirty)
page-writeback.c:927:static void global_update_bandwidth(unsigned long thresh, unsigned long dirty, unsigned long now)
page-writeback.c:952:static void bdi_update_dirty_ratelimit(struct backing_dev_info *bdi, unsigned long thresh, unsigned long bg_thresh, unsigned long dirty, unsigned long bdi_thresh, unsigned long bdi_dirty, unsigned long dirtied, unsigned long elapsed)
page-writeback.c:1336:static void balance_dirty_pages(struct address_space *mapping, unsigned long pages_dirtied)
page-writeback.c:1541:void set_page_dirty_balance(struct page *page, int page_mkwrite)
page-writeback.c:1582:void balance_dirty_pages_ratelimited(struct address_space *mapping)
page-writeback.c:1628:void throttle_vm_writeout(gfp_t gfp_mask)
page-writeback.c:1661:int dirty_writeback_centisecs_handler(ctl_table *table, int write, void __user *buffer, size_t *length, loff_t *ppos)
page-writeback.c:1668:void laptop_mode_timer_fn(unsigned long data)
page-writeback.c:1688:void laptop_io_completion(struct backing_dev_info *info)
page-writeback.c:1698:void laptop_sync_completion(void)
page-writeback.c:1722:void writeback_set_ratelimit(void)
page-writeback.c:1733:static int ratelimit_handler(struct notifier_block *self, unsigned long action, void *hcpu)
page-writeback.c:1794:void tag_pages_for_writeback(struct address_space *mapping, pgoff_t start, pgoff_t end)
page-writeback.c:1834:int write_cache_pages(struct address_space *mapping, struct writeback_control *wbc, writepage_t writepage, void *data)
page-writeback.c:1992:static int __writepage(struct page *page, struct writeback_control *wbc, void *data)
page-writeback.c:2008:int generic_writepages(struct address_space *mapping, struct writeback_control *wbc)
page-writeback.c:2025:int do_writepages(struct address_space *mapping, struct writeback_control *wbc)
page-writeback.c:2047:int write_one_page(struct page *page, int wait)
page-writeback.c:2080:int __set_page_dirty_no_writeback(struct page *page)
page-writeback.c:2091:void account_page_dirtied(struct page *page, struct address_space *mapping)
page-writeback.c:2118:void account_page_writeback(struct page *page)
page-writeback.c:2140:int __set_page_dirty_nobuffers(struct page *page)
page-writeback.c:2176:void account_page_redirty(struct page *page)
page-writeback.c:2192:int redirty_page_for_writepage(struct writeback_control *wbc, struct page *page)
page-writeback.c:2211:int set_page_dirty(struct page *page)
page-writeback.c:2252:int set_page_dirty_lock(struct page *page)
page-writeback.c:2277:int clear_page_dirty_for_io(struct page *page)
page-writeback.c:2333:int test_clear_page_writeback(struct page *page)
page-writeback.c:2369:int test_set_page_writeback(struct page *page)
page-writeback.c:2413:int mapping_tagged(struct address_space *mapping, int tag)
page-writeback.c:2427:void wait_for_stable_page(struct page *page)
page_alloc.c:136:void pm_restore_gfp_mask(void)
page_alloc.c:145:void pm_restrict_gfp_mask(void)
page_alloc.c:153:bool pm_suspended_storage(void)
page_alloc.c:235:void set_pageblock_migratetype(struct page *page, int migratetype)
page_alloc.c:248:static int page_outside_zone_boundaries(struct zone *zone, struct page *page)
page_alloc.c:270:static int page_is_consistent(struct zone *zone, struct page *page)
page_alloc.c:282:static int bad_range(struct zone *zone, struct page *page)
page_alloc.c:292:static inline int bad_range(struct zone *zone, struct page *page)
page_alloc.c:298:static void bad_page(struct page *page)
page_alloc.c:357:static void free_compound_page(struct page *page)
page_alloc.c:362:void prep_compound_page(struct page *page, unsigned long order)
page_alloc.c:379:static int destroy_compound_page(struct page *page, unsigned long order)
page_alloc.c:405:static inline void prep_zero_page(struct page *page, int order, gfp_t gfp_flags)
page_alloc.c:435:static inline void set_page_guard_flag(struct page *page)
page_alloc.c:440:static inline void clear_page_guard_flag(struct page *page)
page_alloc.c:449:static inline void set_page_order(struct page *page, int order)
page_alloc.c:455:static inline void rmv_page_order(struct page *page)
page_alloc.c:619:static inline int free_pages_check(struct page *page)
page_alloc.c:710:static bool free_pages_prepare(struct page *page, unsigned int order)
page_alloc.c:737:static void __free_pages_ok(struct page *page, unsigned int order)
page_alloc.c:844:static inline int check_new_page(struct page *page)
page_alloc.c:857:static int prep_new_page(struct page *page, int order, gfp_t gfp_flags)
page_alloc.c:1196:void drain_zone_pages(struct zone *zone, struct per_cpu_pages *pcp)
page_alloc.c:1223:static void drain_pages(unsigned int cpu)
page_alloc.c:1247:void drain_local_pages(void *arg)
page_alloc.c:1261:void drain_all_pages(void)
page_alloc.c:1298:void mark_free_pages(struct zone *zone)
page_alloc.c:1336:void free_hot_cold_page(struct page *page, int cold)
page_alloc.c:1385:void free_hot_cold_page_list(struct list_head *list, int cold)
page_alloc.c:1403:void split_page(struct page *page, unsigned int order)
page_alloc.c:1424:static int __isolate_free_page(struct page *page, unsigned int order)
page_alloc.c:1473:int split_free_page(struct page *page)
page_alloc.c:1586:static bool should_fail_alloc_page(gfp_t gfp_mask, unsigned int order)
page_alloc.c:1635:static inline bool should_fail_alloc_page(gfp_t gfp_mask, unsigned int order)
page_alloc.c:1723:static nodemask_t *zlc_setup(struct zonelist *zonelist, int alloc_flags)
page_alloc.c:1788:static void zlc_mark_zone_full(struct zonelist *zonelist, struct zoneref *z)
page_alloc.c:1806:static void zlc_clear_zones_full(struct zonelist *zonelist)
page_alloc.c:1817:static bool zone_local(struct zone *local_zone, struct zone *zone)
page_alloc.c:1822:static bool zone_allows_reclaim(struct zone *local_zone, struct zone *zone)
page_alloc.c:1840:static nodemask_t *zlc_setup(struct zonelist *zonelist, int alloc_flags)
page_alloc.c:1851:static void zlc_mark_zone_full(struct zonelist *zonelist, struct zoneref *z)
page_alloc.c:1855:static void zlc_clear_zones_full(struct zonelist *zonelist)
page_alloc.c:1859:static bool zone_local(struct zone *local_zone, struct zone *zone)
page_alloc.c:1864:static bool zone_allows_reclaim(struct zone *local_zone, struct zone *zone)
page_alloc.c:1869:static inline void init_zone_allows_reclaim(int nid)
page_alloc.c:2052:static inline bool should_suppress_show_mem(void)
page_alloc.c:2066:void warn_alloc_failed(gfp_t gfp_mask, int order, const char *fmt, ...)
page_alloc.c:2450:bool gfp_pfmemalloc_allowed(gfp_t gfp_mask)
page_alloc.c:2750:unsigned long __get_free_pages(gfp_t gfp_mask, unsigned int order)
page_alloc.c:2767:unsigned long get_zeroed_page(gfp_t gfp_mask)
page_alloc.c:2773:void __free_pages(struct page *page, unsigned int order)
page_alloc.c:2785:void free_pages(unsigned long addr, unsigned int order)
page_alloc.c:2806:void __free_memcg_kmem_pages(struct page *page, unsigned int order)
page_alloc.c:2812:void free_memcg_kmem_pages(unsigned long addr, unsigned int order)
page_alloc.c:2820:static void *make_alloc_exact(unsigned long addr, unsigned order, size_t size)
page_alloc.c:2848:void *alloc_pages_exact(size_t size, gfp_t gfp_mask)
page_alloc.c:2870:void *alloc_pages_exact_nid(int nid, size_t size, gfp_t gfp_mask)
page_alloc.c:2887:void free_pages_exact(void *virt, size_t size)
page_alloc.c:2934:unsigned long nr_free_buffer_pages(void)
page_alloc.c:2946:unsigned long nr_free_pagecache_pages(void)
page_alloc.c:2951:static inline void show_node(struct zone *zone)
page_alloc.c:2957:void si_meminfo(struct sysinfo *val)
page_alloc.c:2971:void si_meminfo_node(struct sysinfo *val, int nid)
page_alloc.c:2997:bool skip_free_areas_node(unsigned int flags, int nid)
page_alloc.c:3015:static void show_migration_types(unsigned char type)
page_alloc.c:3049:void show_free_areas(unsigned int filter)
page_alloc.c:3209:static void zoneref_set_zone(struct zone *zone, struct zoneref *zoneref)
page_alloc.c:3275:static int __parse_numa_zonelist_order(char *s)
page_alloc.c:3369:static int find_next_best_node(int node, nodemask_t *used_node_mask)
page_alloc.c:3421:static void build_zonelists_in_node_order(pg_data_t *pgdat, int node)
page_alloc.c:3437:static void build_thisnode_zonelists(pg_data_t *pgdat)
page_alloc.c:3456:static void build_zonelists_in_zone_order(pg_data_t *pgdat, int nr_nodes)
page_alloc.c:3480:static int default_zonelist_order(void)
page_alloc.c:3543:static void set_zonelist_order(void)
page_alloc.c:3551:static void build_zonelists(pg_data_t *pgdat)
page_alloc.c:3603:static void build_zonelist_cache(pg_data_t *pgdat)
page_alloc.c:3623:int local_memory_node(int node)
page_alloc.c:3637:static void set_zonelist_order(void)
page_alloc.c:3642:static void build_zonelists(pg_data_t *pgdat)
page_alloc.c:3677:static void build_zonelist_cache(pg_data_t *pgdat)
page_alloc.c:3710:static int __build_all_zonelists(void *data)
page_alloc.c:3880:static int pageblock_is_reserved(unsigned long start_pfn, unsigned long end_pfn)
page_alloc.c:3898:static void setup_zone_migrate_reserve(struct zone *zone)
page_alloc.c:4131:static void pageset_set_batch(struct per_cpu_pageset *p, unsigned long batch)
page_alloc.c:4136:static void pageset_init(struct per_cpu_pageset *p)
page_alloc.c:4149:static void setup_pageset(struct per_cpu_pageset *p, unsigned long batch)
page_alloc.c:4209:int zone_wait_table_init(struct zone *zone, unsigned long zone_size_pages)
page_alloc.c:5145:static void check_for_memory(pg_data_t *pgdat, int nid)
page_alloc.c:5287:void adjust_managed_page_count(struct page *page, long count)
page_alloc.c:5300:unsigned long free_reserved_area(void *start, void *end, int poison, char *s)
page_alloc.c:5322:void free_highmem_page(struct page *page)
page_alloc.c:5444:static void calculate_totalreserve_pages(void)
page_alloc.c:5489:static void setup_per_zone_lowmem_reserve(void)
page_alloc.c:5522:static void __setup_per_zone_wmarks(void)
page_alloc.c:5587:void setup_per_zone_wmarks(void)
page_alloc.c:5904:static inline int pfn_to_bitidx(struct zone *zone, unsigned long pfn)
page_alloc.c:6054:bool is_pageblock_removable_nolock(struct page *page)
page_alloc.c:6264:void free_contig_range(unsigned long pfn, unsigned nr_pages)
page_alloc.c:6294:void zone_pcp_reset(struct zone *zone)
page_alloc.c:6369:bool is_free_buddy_page(struct page *page)
page_alloc.c:6429:static void dump_page_flags(unsigned long flags)
page_alloc.c:6460:void dump_page(struct page *page)
page_cgroup.c:24:struct page_cgroup *lookup_page_cgroup(struct page *page)
page_cgroup.c:91:struct page_cgroup *lookup_page_cgroup(struct page *page)
page_cgroup.c:163:static void free_page_cgroup(void *addr)
page_cgroup.c:177:void __free_page_cgroup(unsigned long pfn)
page_cgroup.c:356:static int swap_cgroup_prepare(int type)
page_cgroup.c:433:unsigned short swap_cgroup_record(swp_entry_t ent, unsigned short id)
page_cgroup.c:456:unsigned short lookup_swap_cgroup_id(swp_entry_t ent)
page_cgroup.c:461:int swap_cgroup_swapon(int type, unsigned long max_pages)
page_cgroup.c:501:void swap_cgroup_swapoff(int type)
page_io.c:46:void end_swap_bio_write(struct bio *bio, int err)
page_io.c:72:void end_swap_bio_read(struct bio *bio, int err)
page_io.c:232:int swap_writepage(struct page *page, struct writeback_control *wbc)
page_io.c:317:int swap_readpage(struct page *page)
page_io.c:353:int swap_set_page_dirty(struct page *page)
page_isolation.c:12:int set_migratetype_isolate(struct page *page, bool skip_hwpoisoned_pages)
page_isolation.c:74:void unset_migratetype_isolate(struct page *page, unsigned migratetype)
percpu-km.c:36:static int pcpu_populate_chunk(struct pcpu_chunk *chunk, int off, int size)
percpu-km.c:46:static void pcpu_depopulate_chunk(struct pcpu_chunk *chunk, int off, int size)
percpu-km.c:76:static void pcpu_destroy_chunk(struct pcpu_chunk *chunk)
percpu-vm.c:149:static void __pcpu_unmap_pages(unsigned long addr, int nr_pages)
percpu-vm.c:301:static int pcpu_populate_chunk(struct pcpu_chunk *chunk, int off, int size)
percpu-vm.c:371:static void pcpu_depopulate_chunk(struct pcpu_chunk *chunk, int off, int size)
percpu-vm.c:432:static void pcpu_destroy_chunk(struct pcpu_chunk *chunk)
percpu.c:186:static bool pcpu_addr_in_first_chunk(void *addr)
percpu.c:193:static bool pcpu_addr_in_reserved_chunk(void *addr)
percpu.c:201:static int __pcpu_size_to_slot(int size)
percpu.c:207:static int pcpu_size_to_slot(int size)
percpu.c:214:static int pcpu_chunk_slot(const struct pcpu_chunk *chunk)
percpu.c:223:static void pcpu_set_page_chunk(struct page *page, struct pcpu_chunk *pcpu)
percpu.c:290:static void *pcpu_mem_zalloc(size_t size)
percpu.c:308:static void pcpu_mem_free(void *ptr, size_t size)
percpu.c:329:static void pcpu_chunk_relocate(struct pcpu_chunk *chunk, int oslot)
percpu.c:355:static int pcpu_need_to_extend(struct pcpu_chunk *chunk)
percpu.c:382:static int pcpu_extend_area_map(struct pcpu_chunk *chunk, int new_alloc)
percpu.c:481:static int pcpu_alloc_area(struct pcpu_chunk *chunk, int size, int align)
percpu.c:570:static void pcpu_free_area(struct pcpu_chunk *chunk, int freeme)
percpu.c:629:static void pcpu_free_chunk(struct pcpu_chunk *chunk)
percpu.c:875:static void pcpu_reclaim(struct work_struct *work)
percpu.c:913:void free_percpu(void __percpu *ptr)
percpu.c:960:bool is_kernel_percpu_address(unsigned long addr)
percpu.c:1001:phys_addr_t per_cpu_ptr_to_phys(void *addr)
pgtable-generic.c:19:void pgd_clear_bad(pgd_t *pgd)
pgtable-generic.c:25:void pud_clear_bad(pud_t *pud)
pgtable-generic.c:31:void pmd_clear_bad(pmd_t *pmd)
pgtable-generic.c:170:pgtable_t pgtable_trans_huge_withdraw(struct mm_struct *mm, pmd_t *pmdp)
quicklist.c:89:unsigned long quicklist_total_size(void)
readahead.c:246:unsigned long max_sane_readahead(unsigned long nr)
rmap.c:85:static inline void anon_vma_free(struct anon_vma *anon_vma)
rmap.c:119:static void anon_vma_chain_free(struct anon_vma_chain *anon_vma_chain)
rmap.c:161:int anon_vma_prepare(struct vm_area_struct *vma)
rmap.c:229:static inline void unlock_anon_vma_root(struct anon_vma *root)
rmap.c:239:int anon_vma_clone(struct vm_area_struct *dst, struct vm_area_struct *src)
rmap.c:272:int anon_vma_fork(struct vm_area_struct *vma, struct vm_area_struct *pvma)
rmap.c:322:void unlink_anon_vmas(struct vm_area_struct *vma)
rmap.c:364:static void anon_vma_ctor(void *data)
rmap.c:403:struct anon_vma *page_get_anon_vma(struct page *page)
rmap.c:445:struct anon_vma *page_lock_anon_vma_read(struct page *page)
rmap.c:507:void page_unlock_anon_vma_read(struct anon_vma *anon_vma)
rmap.c:541:unsigned long page_address_in_vma(struct page *page, struct vm_area_struct *vma)
rmap.c:565:pmd_t *mm_find_pmd(struct mm_struct *mm, unsigned long address)
rmap.c:646:int page_mapped_in_vma(struct page *page, struct vm_area_struct *vma)
rmap.c:913:static int page_mkclean_file(struct address_space *mapping, struct page *page)
rmap.c:932:int page_mkclean(struct page *page)
rmap.c:1107:void page_add_file_rmap(struct page *page)
rmap.c:1126:void page_remove_rmap(struct page *page)
rmap.c:1429:bool is_vma_temporary_stack(struct vm_area_struct *vma)
rmap.c:1459:static int try_to_unmap_anon(struct page *page, enum ttu_flags flags)
rmap.c:1512:static int try_to_unmap_file(struct page *page, enum ttu_flags flags)
rmap.c:1622:int try_to_unmap(struct page *page, enum ttu_flags flags)
rmap.c:1655:int try_to_munlock(struct page *page)
rmap.c:1667:void __put_anon_vma(struct anon_vma *anon_vma)
shmem.c:139:static inline int shmem_acct_size(unsigned long flags, loff_t size)
shmem.c:145:static inline void shmem_unacct_size(unsigned long flags, loff_t size)
shmem.c:157:static inline int shmem_acct_block(unsigned long flags)
shmem.c:163:static inline void shmem_unacct_blocks(unsigned long flags, long pages)
shmem.c:185:static int shmem_reserve_inode(struct super_block *sb)
shmem.c:200:static void shmem_free_inode(struct super_block *sb)
shmem.c:222:static void shmem_recalc_inode(struct inode *inode)
shmem.c:317:static void shmem_delete_from_page_cache(struct page *page, void *radswap)
shmem.c:402:static void shmem_deswap_pagevec(struct pagevec *pvec)
shmem.c:417:void shmem_unlock_mapping(struct address_space *mapping)
shmem.c:589:void shmem_truncate_range(struct inode *inode, loff_t lstart, loff_t lend)
shmem.c:596:static int shmem_setattr(struct dentry *dentry, struct iattr *attr)
shmem.c:630:static void shmem_evict_inode(struct inode *inode)
shmem.c:734:int shmem_unuse(swp_entry_t swap, struct page *page)
shmem.c:782:static int shmem_writepage(struct page *page, struct writeback_control *wbc)
shmem.c:886:static void shmem_show_mpol(struct seq_file *seq, struct mempolicy *mpol)
shmem.c:954:static inline void shmem_show_mpol(struct seq_file *seq, struct mempolicy *mpol)
shmem.c:991:static bool shmem_should_replace_page(struct page *page, gfp_t gfp)
shmem.c:1297:static int shmem_fault(struct vm_area_struct *vma, struct vm_fault *vmf)
shmem.c:1315:static int shmem_set_policy(struct vm_area_struct *vma, struct mempolicy *mpol)
shmem.c:1332:int shmem_lock(struct file *file, int lock, struct user_struct *user)
shmem.c:1357:static int shmem_mmap(struct file *file, struct vm_area_struct *vma)
shmem.c:1467:static void do_shmem_file_read(struct file *filp, loff_t *ppos, read_descriptor_t *desc, read_actor_t actor)
shmem.c:1769:static loff_t shmem_file_llseek(struct file *file, loff_t offset, int whence)
shmem.c:1908:static int shmem_statfs(struct dentry *dentry, struct kstatfs *buf)
shmem.c:1997:static int shmem_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)
shmem.c:2016:static int shmem_link(struct dentry *old_dentry, struct inode *dir, struct dentry *dentry)
shmem.c:2040:static int shmem_unlink(struct inode *dir, struct dentry *dentry)
shmem.c:2054:static int shmem_rmdir(struct inode *dir, struct dentry *dentry)
shmem.c:2070:static int shmem_rename(struct inode *old_dir, struct dentry *old_dentry, struct inode *new_dir, struct dentry *new_dentry)
shmem.c:2095:static int shmem_symlink(struct inode *dir, struct dentry *dentry, const char *symname)
shmem.c:2154:static void *shmem_follow_short_symlink(struct dentry *dentry, struct nameidata *nd)
shmem.c:2160:static void *shmem_follow_link(struct dentry *dentry, struct nameidata *nd)
shmem.c:2170:static void shmem_put_link(struct dentry *dentry, struct nameidata *nd, void *cookie)
shmem.c:2232:static int shmem_xattr_validate(const char *name)
shmem.c:2293:static int shmem_removexattr(struct dentry *dentry, const char *name)
shmem.c:2313:static ssize_t shmem_listxattr(struct dentry *dentry, char *buffer, size_t size)
shmem.c:2348:static int shmem_match(struct inode *ino, void *vfh)
shmem.c:2519:static int shmem_remount_fs(struct super_block *sb, int *flags, char *data)
shmem.c:2563:static int shmem_show_options(struct seq_file *seq, struct dentry *root)
shmem.c:2585:static void shmem_put_super(struct super_block *sb)
shmem.c:2595:int shmem_fill_super(struct super_block *sb, void *data, int silent)
shmem.c:2678:static void shmem_destroy_callback(struct rcu_head *head)
shmem.c:2684:static void shmem_destroy_inode(struct inode *inode)
shmem.c:2691:static void shmem_init_inode(void *foo)
shmem.c:2697:static int shmem_init_inodecache(void)
shmem.c:2705:static void shmem_destroy_inodecache(void)
shmem.c:2887:int shmem_unuse(swp_entry_t swap, struct page *page)
shmem.c:2892:int shmem_lock(struct file *file, int lock, struct user_struct *user)
shmem.c:2897:void shmem_unlock_mapping(struct address_space *mapping)
shmem.c:2901:void shmem_truncate_range(struct inode *inode, loff_t lstart, loff_t lend)
shmem.c:2987:struct file *shmem_kernel_file_setup(const char *name, loff_t size, unsigned long flags)
shmem.c:2998:struct file *shmem_file_setup(const char *name, loff_t size, unsigned long flags)
shmem.c:3008:int shmem_zero_setup(struct vm_area_struct *vma)
slab.c:196:static inline bool is_obj_pfmemalloc(void *objp)
slab.c:201:static inline void set_obj_pfmemalloc(void **objp)
slab.c:207:static inline void clear_obj_pfmemalloc(void **objp)
slab.c:243:static void kmem_cache_node_init(struct kmem_cache_node *parent)
slab.c:340:static int obj_offset(struct kmem_cache *cachep)
slab.c:474:static void slab_set_debugobj_lock_classes_node(struct kmem_cache *cachep, int node)
slab.c:479:static void slab_set_debugobj_lock_classes(struct kmem_cache *cachep)
slab.c:487:static void init_node_lock_keys(int q)
slab.c:510:static void on_slab_lock_classes_node(struct kmem_cache *cachep, int q)
slab.c:519:static inline void on_slab_lock_classes(struct kmem_cache *cachep)
slab.c:528:static inline void init_lock_keys(void)
slab.c:536:static void init_node_lock_keys(int q)
slab.c:540:static inline void init_lock_keys(void)
slab.c:544:static inline void on_slab_lock_classes(struct kmem_cache *cachep)
slab.c:548:static inline void on_slab_lock_classes_node(struct kmem_cache *cachep, int node)
slab.c:552:static void slab_set_debugobj_lock_classes_node(struct kmem_cache *cachep, int node)
slab.c:556:static void slab_set_debugobj_lock_classes(struct kmem_cache *cachep)
slab.c:568:static size_t slab_mgmt_size(size_t nr_objs, size_t align)
slab.c:676:static void init_reap_node(int cpu)
slab.c:687:static void next_reap_node(void)
slab.c:709:static void start_cpu_timer(int cpu)
slab.c:751:static inline bool is_slab_pfmemalloc(struct page *page)
slab.c:900:static inline void free_alien_cache(struct array_cache **ac_ptr)
slab.c:904:static inline int cache_free_alien(struct kmem_cache *cachep, void *objp)
slab.c:951:static void free_alien_cache(struct array_cache **ac_ptr)
slab.c:986:static void reap_alien(struct kmem_cache *cachep, struct kmem_cache_node *n)
slab.c:1017:static inline int cache_free_alien(struct kmem_cache *cachep, void *objp)
slab.c:1062:static int init_cache_node_node(int node)
slab.c:1105:static void cpuup_canceled(long cpu)
slab.c:1170:static int cpuup_prepare(long cpu)
slab.c:1418:static void setup_node_pointer(struct kmem_cache *cachep)
slab.c:1705:static void kmem_freepages(struct kmem_cache *cachep, struct page *page)
slab.c:1730:static void kmem_rcu_free(struct rcu_head *head)
slab.c:1777:static void poison_obj(struct kmem_cache *cachep, void *addr, unsigned char val)
slab.c:1786:static void dump_line(char *data, int offset, int limit)
slab.c:1820:static void print_objinfo(struct kmem_cache *cachep, void *objp, int lines)
slab.c:1847:static void check_poison_obj(struct kmem_cache *cachep, void *objp)
slab.c:1955:static void slab_destroy(struct kmem_cache *cachep, struct page *page)
slab.c:2333:static void check_irq_off(void)
slab.c:2338:static void check_irq_on(void)
slab.c:2343:static void check_spinlock_acquired(struct kmem_cache *cachep)
slab.c:2351:static void check_spinlock_acquired_node(struct kmem_cache *cachep, int node)
slab.c:2370:static void do_drain(void *arg)
slab.c:2384:static void drain_cpu_caches(struct kmem_cache *cachep)
slab.c:2446:static int __cache_shrink(struct kmem_cache *cachep)
slab.c:2474:int kmem_cache_shrink(struct kmem_cache *cachep)
slab.c:2488:int __kmem_cache_shutdown(struct kmem_cache *cachep)
slab.c:2596:static void kmem_flagcheck(struct kmem_cache *cachep, gfp_t flags)
slab.c:2744:static void kfree_debugcheck(const void *objp)
slab.c:2753:static inline void verify_redzone_free(struct kmem_cache *cache, void *obj)
slab.c:2977:static bool slab_should_failslab(struct kmem_cache *cachep, gfp_t flags)
slab.c:2985:static inline void *____cache_alloc(struct kmem_cache *cachep, gfp_t flags)
slab.c:3035:static void *alternate_node_alloc(struct kmem_cache *cachep, gfp_t flags)
slab.c:3059:static void *fallback_alloc(struct kmem_cache *cache, gfp_t flags)
slab.c:3370:static void cache_flusharray(struct kmem_cache *cachep, struct array_cache *ac)
slab.c:3464:void *kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
slab.c:3502:void *kmem_cache_alloc_node(struct kmem_cache *cachep, gfp_t flags, int nodeid)
slab.c:3544:void *__kmalloc_node(size_t size, gfp_t flags, int node)
slab.c:3557:void *__kmalloc_node(size_t size, gfp_t flags, int node)
slab.c:3595:void *__kmalloc(size_t size, gfp_t flags)
slab.c:3601:void *__kmalloc_track_caller(size_t size, gfp_t flags, unsigned long caller)
slab.c:3608:void *__kmalloc(size_t size, gfp_t flags)
slab.c:3623:void kmem_cache_free(struct kmem_cache *cachep, void *objp)
slab.c:3650:void kfree(const void *objp)
slab.c:3673:static int alloc_kmemlist(struct kmem_cache *cachep, gfp_t gfp)
slab.c:3763:static void do_ccupdate_local(void *info)
slab.c:3846:static int enable_cpucache(struct kmem_cache *cachep, gfp_t gfp)
slab.c:3953:static void cache_reap(struct work_struct *w)
slab.c:4010:void get_slabinfo(struct kmem_cache *cachep, struct slabinfo *sinfo)
slab.c:4078:void slabinfo_show_stats(struct seq_file *m, struct kmem_cache *cachep)
slab.c:4164:static void *leaks_start(struct seq_file *m, loff_t *pos)
slab.c:4170:static inline int add_caller(unsigned long *n, unsigned long v)
slab.c:4226:static void show_symbol(struct seq_file *m, unsigned long address)
slab.c:4242:static int leaks_show(struct seq_file *m, void *p)
slab.c:4309:static int slabstats_open(struct inode *inode, struct file *file)
slab.c:4356:size_t ksize(const void *objp)
slab.h:117:static inline bool is_root_cache(struct kmem_cache *s)
slab.h:129:static inline void memcg_bind_pages(struct kmem_cache *s, int order)
slab.h:135:static inline void memcg_release_pages(struct kmem_cache *s, int order)
slab.h:178:static inline bool is_root_cache(struct kmem_cache *s)
slab.h:189:static inline void memcg_bind_pages(struct kmem_cache *s, int order)
slab.h:193:static inline void memcg_release_pages(struct kmem_cache *s, int order)
slab_common.c:88:int memcg_update_all_caches(int num_memcgs)
slab_common.c:254:void kmem_cache_destroy(struct kmem_cache *s)
slab_common.c:287:int slab_is_available(void)
slab_common.c:366:static inline int size_index_elem(size_t bytes)
slab_common.c:375:struct kmem_cache *kmalloc_slab(size_t size, gfp_t flags)
slab_common.c:502:void *kmalloc_order_trace(size_t size, gfp_t flags, unsigned int order)
slab_common.c:519:void print_slabinfo_header(struct seq_file *m)
slab_common.c:542:static void *s_start(struct seq_file *m, loff_t *pos)
slab_common.c:553:void *slab_next(struct seq_file *m, void *p, loff_t *pos)
slab_common.c:558:void slab_stop(struct seq_file *m, void *p)
slab_common.c:589:int cache_show(struct kmem_cache *s, struct seq_file *m)
slab_common.c:611:static int s_show(struct seq_file *m, void *p)
slab_common.c:640:static int slabinfo_open(struct inode *inode, struct file *file)
slob.c:107:static inline int slob_page_free(struct page *sp)
slob.c:112:static void set_slob_page_free(struct page *sp, struct list_head *list)
slob.c:118:static inline void clear_slob_page_free(struct page *sp)
slob.c:145:static void set_slob(slob_t *s, slobidx_t size, slob_t *next)
slob.c:160:static slobidx_t slob_units(slob_t *s)
slob.c:170:static slob_t *slob_next(slob_t *s)
slob.c:185:static int slob_last(slob_t *s)
slob.c:190:static void *slob_new_pages(gfp_t gfp, int order, int node)
slob.c:207:static void slob_free_pages(void *b, int order)
slob.c:217:static void *slob_page_alloc(struct page *sp, size_t size, int align)
slob.c:268:static void *slob_alloc(size_t size, gfp_t gfp, int align, int node)
slob.c:340:static void slob_free(void *block, int size)
slob.c:465:void *__kmalloc(size_t size, gfp_t gfp)
slob.c:472:void *__kmalloc_track_caller(size_t size, gfp_t gfp, unsigned long caller)
slob.c:486:void kfree(const void *block)
slob.c:507:size_t ksize(const void *block)
slob.c:527:int __kmem_cache_create(struct kmem_cache *c, unsigned long flags)
slob.c:537:void *slob_alloc_node(struct kmem_cache *c, gfp_t flags, int node)
slob.c:565:void *kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
slob.c:572:void *__kmalloc_node(size_t size, gfp_t gfp, int node)
slob.c:578:void *kmem_cache_alloc_node(struct kmem_cache *cachep, gfp_t gfp, int node)
slob.c:585:static void __kmem_cache_free(void *b, int size)
slob.c:593:static void kmem_rcu_free(struct rcu_head *head)
slob.c:601:void kmem_cache_free(struct kmem_cache *c, void *b)
slob.c:617:int __kmem_cache_shutdown(struct kmem_cache *c)
slob.c:623:int kmem_cache_shrink(struct kmem_cache *d)
slub.c:118:static inline int kmem_cache_debug(struct kmem_cache *s)
slub.c:127:static inline bool kmem_cache_has_cpu_partial(struct kmem_cache *s)
slub.c:218:static inline int sysfs_slab_alias(struct kmem_cache *s, const char *p)
slub.c:225:static inline void stat(const struct kmem_cache *s, enum stat_item si)
slub.c:242:static inline int check_valid_pointer(struct kmem_cache *s, struct page *page, const void *object)
slub.c:258:static inline void *get_freepointer(struct kmem_cache *s, void *object)
slub.c:263:static void prefetch_freepointer(const struct kmem_cache *s, void *object)
slub.c:268:static inline void *get_freepointer_safe(struct kmem_cache *s, void *object)
slub.c:280:static inline void set_freepointer(struct kmem_cache *s, void *object, void *fp)
slub.c:291:static inline int slab_index(void *p, struct kmem_cache *s, void *addr)
slub.c:296:static inline size_t slab_ksize(const struct kmem_cache *s)
slub.c:320:static inline int order_objects(int order, unsigned long size, int reserved)
slub.c:334:static inline int oo_order(struct kmem_cache_order_objects x)
slub.c:339:static inline int oo_objects(struct kmem_cache_order_objects x)
slub.c:443:static void get_map(struct kmem_cache *s, struct page *page, unsigned long *map)
slub.c:467:static void print_section(char *text, u8 *addr, unsigned int length)
slub.c:485:static void set_track(struct kmem_cache *s, void *object, enum track_item alloc, unsigned long addr)
slub.c:516:static void init_tracking(struct kmem_cache *s, void *object)
slub.c:525:static void print_track(const char *s, struct track *t)
slub.c:544:static void print_tracking(struct kmem_cache *s, void *object)
slub.c:553:static void print_page_info(struct page *page)
slub.c:561:static void slab_bug(struct kmem_cache *s, char *fmt, ...)
slub.c:578:static void slab_fix(struct kmem_cache *s, char *fmt, ...)
slub.c:589:static void print_trailer(struct kmem_cache *s, struct page *page, u8 *p)
slub.c:625:static void object_err(struct kmem_cache *s, struct page *page, u8 *object, char *reason)
slub.c:631:static void slab_err(struct kmem_cache *s, struct page *page, const char *fmt, ...)
slub.c:644:static void init_object(struct kmem_cache *s, void *object, u8 val)
slub.c:664:static int check_bytes_and_report(struct kmem_cache *s, struct page *page, u8 *object, char *what, u8 *start, unsigned int value, unsigned int bytes)
slub.c:724:static int check_pad_bytes(struct kmem_cache *s, struct page *page, u8 *p)
slub.c:744:static int slab_pad_check(struct kmem_cache *s, struct page *page)
slub.c:775:static int check_object(struct kmem_cache *s, struct page *page, void *object, u8 val)
slub.c:826:static int check_slab(struct kmem_cache *s, struct page *page)
slub.c:857:static int on_freelist(struct kmem_cache *s, struct page *page, void *search)
slub.c:906:static void trace(struct kmem_cache *s, struct page *page, void *object, int alloc)
slub.c:927:static inline void kmalloc_large_node_hook(void *ptr, size_t size, gfp_t flags)
slub.c:932:static inline void kfree_hook(const void *x)
slub.c:937:static inline int slab_pre_alloc_hook(struct kmem_cache *s, gfp_t flags)
slub.c:946:static inline void slab_post_alloc_hook(struct kmem_cache *s, gfp_t flags, void *object)
slub.c:953:static inline void slab_free_hook(struct kmem_cache *s, void *x)
slub.c:981:static void add_full(struct kmem_cache *s, struct kmem_cache_node *n, struct page *page)
slub.c:992:static void remove_full(struct kmem_cache *s, struct page *page)
slub.c:1013:static inline void inc_slabs_node(struct kmem_cache *s, int node, int objects)
slub.c:1028:static inline void dec_slabs_node(struct kmem_cache *s, int node, int objects)
slub.c:1234:static inline int slab_pad_check(struct kmem_cache *s, struct page *page)
slub.c:1260:static inline void kmalloc_large_node_hook(void *ptr, size_t size, gfp_t flags)
slub.c:1265:static inline void kfree_hook(const void *x)
slub.c:1270:static inline int slab_pre_alloc_hook(struct kmem_cache *s, gfp_t flags)
slub.c:1273:static inline void slab_post_alloc_hook(struct kmem_cache *s, gfp_t flags, void *object)
slub.c:1278:static inline void slab_free_hook(struct kmem_cache *s, void *x)
slub.c:1362:static void setup_object(struct kmem_cache *s, struct page *page, void *object)
slub.c:1413:static void __free_slab(struct kmem_cache *s, struct page *page)
slub.c:1447:static void rcu_free_slab(struct rcu_head *h)
slub.c:1459:static void free_slab(struct kmem_cache *s, struct page *page)
slub.c:1482:static void discard_slab(struct kmem_cache *s, struct page *page)
slub.c:1493:static inline void add_partial(struct kmem_cache_node *n, struct page *page, int tail)
slub.c:1505:static inline void remove_partial(struct kmem_cache_node *n, struct page *page)
slub.c:1519:static inline void *acquire_slab(struct kmem_cache *s, struct kmem_cache_node *n, struct page *page, int mode, int *objects)
slub.c:1561:static void *get_partial_node(struct kmem_cache *s, struct kmem_cache_node *n, struct kmem_cache_cpu *c, gfp_t flags)
slub.c:1609:static void *get_any_partial(struct kmem_cache *s, gfp_t flags, struct kmem_cache_cpu *c)
slub.c:1674:static void *get_partial(struct kmem_cache *s, gfp_t flags, int node, struct kmem_cache_cpu *c)
slub.c:1745:static void init_kmem_cache_cpus(struct kmem_cache *s)
slub.c:1756:static void deactivate_slab(struct kmem_cache *s, struct page *page, void *freelist)
slub.c:1904:static void unfreeze_partials(struct kmem_cache *s, struct kmem_cache_cpu *c)
slub.c:1973:static void put_cpu_partial(struct kmem_cache *s, struct page *page, int drain)
slub.c:2016:static inline void flush_slab(struct kmem_cache *s, struct kmem_cache_cpu *c)
slub.c:2031:static inline void __flush_cpu_slab(struct kmem_cache *s, int cpu)
slub.c:2043:static void flush_cpu_slab(void *d)
slub.c:2050:static bool has_cpu_slab(int cpu, void *info)
slub.c:2058:static void flush_all(struct kmem_cache *s)
slub.c:2067:static inline int node_match(struct page *page, int node)
slub.c:2076:static int count_free(struct page *page)
slub.c:2138:static inline void *new_slab_objects(struct kmem_cache *s, gfp_t flags, int node, struct kmem_cache_cpu **pc)
slub.c:2171:static inline bool pfmemalloc_match(struct page *page, gfp_t gfpflags)
slub.c:2189:static inline void *get_freelist(struct kmem_cache *s, struct page *page)
slub.c:2229:static void *__slab_alloc(struct kmem_cache *s, gfp_t gfpflags, int node, unsigned long addr, struct kmem_cache_cpu *c)
slub.c:2428:void *kmem_cache_alloc(struct kmem_cache *s, gfp_t gfpflags)
slub.c:2451:void *kmem_cache_alloc_trace(struct kmem_cache *s, gfp_t gfpflags, size_t size)
slub.c:2461:void *kmem_cache_alloc_node(struct kmem_cache *s, gfp_t gfpflags, int node)
slub.c:2495:static void __slab_free(struct kmem_cache *s, struct page *page, void *x, unsigned long addr)
slub.c:2655:void kmem_cache_free(struct kmem_cache *s, void *x)
slub.c:2720:static inline int slab_order(int size, int min_objects, int max_order, int fract_leftover, int reserved)
slub.c:2748:static inline int calculate_order(int size, int reserved)
slub.c:2798:static void init_kmem_cache_node(struct kmem_cache_node *n)
slub.c:2810:static inline int alloc_kmem_cache_cpus(struct kmem_cache *s)
slub.c:2841:static void early_kmem_cache_node_alloc(int node)
slub.c:2874:static void free_kmem_cache_nodes(struct kmem_cache *s)
slub.c:2888:static int init_kmem_cache_nodes(struct kmem_cache *s)
slub.c:2913:static void set_min_partial(struct kmem_cache *s, unsigned long min)
slub.c:2926:static int calculate_sizes(struct kmem_cache *s, int forced_order)
slub.c:3036:static int kmem_cache_open(struct kmem_cache *s, unsigned long flags)
slub.c:3119:static void list_slab_objects(struct kmem_cache *s, struct page *page, const char *text)
slub.c:3150:static void free_partial(struct kmem_cache *s, struct kmem_cache_node *n)
slub.c:3168:static inline int kmem_cache_close(struct kmem_cache *s)
slub.c:3186:int __kmem_cache_shutdown(struct kmem_cache *s)
slub.c:3247:void *__kmalloc(size_t size, gfp_t flags)
slub.c:3269:static void *kmalloc_large_node(size_t size, gfp_t flags, int node)
slub.c:3283:void *__kmalloc_node(size_t size, gfp_t flags, int node)
slub.c:3312:size_t ksize(const void *object)
slub.c:3330:void kfree(const void *x)
slub.c:3362:int kmem_cache_shrink(struct kmem_cache *s)
slub.c:3420:static int slab_mem_going_offline_callback(void *arg)
slub.c:3432:static void slab_mem_offline_callback(void *arg)
slub.c:3467:static int slab_mem_going_online_callback(void *arg)
slub.c:3507:static int slab_memory_callback(struct notifier_block *self, unsigned long action, void *arg)
slub.c:3634:static int slab_unmergeable(struct kmem_cache *s)
slub.c:3716:int __kmem_cache_create(struct kmem_cache *s, unsigned long flags)
slub.c:3744:static int slab_cpuup_callback(struct notifier_block *nfb, unsigned long action, void *hcpu)
slub.c:3775:void *__kmalloc_track_caller(size_t size, gfp_t gfpflags, unsigned long caller)
slub.c:3797:void *__kmalloc_node_track_caller(size_t size, gfp_t gfpflags, int node, unsigned long caller)
slub.c:3827:static int count_inuse(struct page *page)
slub.c:3832:static int count_total(struct page *page)
slub.c:3839:static int validate_slab(struct kmem_cache *s, struct page *page, unsigned long *map)
slub.c:3865:static void validate_slab_slab(struct kmem_cache *s, struct page *page, unsigned long *map)
slub.c:3872:static int validate_slab_node(struct kmem_cache *s, struct kmem_cache_node *n, unsigned long *map)
slub.c:3905:static long validate_slab_cache(struct kmem_cache *s)
slub.c:3947:static void free_loc_track(struct loc_track *t)
slub.c:3954:static int alloc_loc_track(struct loc_track *t, unsigned long max, gfp_t flags)
slub.c:3974:static int add_location(struct loc_track *t, struct kmem_cache *s, const struct track *track)
slub.c:4049:static void process_slab(struct loc_track *t, struct kmem_cache *s, struct page *page, enum track_item alloc, unsigned long *map)
slub.c:4062:static int list_locations(struct kmem_cache *s, char *buf, enum track_item alloc)
slub.c:4152:static void resiliency_test(void)
slub.c:4228:static ssize_t show_slab_objects(struct kmem_cache *s, char *buf, unsigned long flags)
slub.c:4318:static int any_slab_objects(struct kmem_cache *s)
slub.c:4352:static ssize_t slab_size_show(struct kmem_cache *s, char *buf)
slub.c:4358:static ssize_t align_show(struct kmem_cache *s, char *buf)
slub.c:4364:static ssize_t object_size_show(struct kmem_cache *s, char *buf)
slub.c:4370:static ssize_t objs_per_slab_show(struct kmem_cache *s, char *buf)
slub.c:4393:static ssize_t order_show(struct kmem_cache *s, char *buf)
slub.c:4399:static ssize_t min_partial_show(struct kmem_cache *s, char *buf)
slub.c:4419:static ssize_t cpu_partial_show(struct kmem_cache *s, char *buf)
slub.c:4424:static ssize_t cpu_partial_store(struct kmem_cache *s, const char *buf, size_t length)
slub.c:4441:static ssize_t ctor_show(struct kmem_cache *s, char *buf)
slub.c:4449:static ssize_t aliases_show(struct kmem_cache *s, char *buf)
slub.c:4455:static ssize_t partial_show(struct kmem_cache *s, char *buf)
slub.c:4461:static ssize_t cpu_slabs_show(struct kmem_cache *s, char *buf)
slub.c:4467:static ssize_t objects_show(struct kmem_cache *s, char *buf)
slub.c:4473:static ssize_t objects_partial_show(struct kmem_cache *s, char *buf)
slub.c:4479:static ssize_t slabs_cpu_partial_show(struct kmem_cache *s, char *buf)
slub.c:4510:static ssize_t reclaim_account_show(struct kmem_cache *s, char *buf)
slub.c:4515:static ssize_t reclaim_account_store(struct kmem_cache *s, const char *buf, size_t length)
slub.c:4524:static ssize_t hwcache_align_show(struct kmem_cache *s, char *buf)
slub.c:4531:static ssize_t cache_dma_show(struct kmem_cache *s, char *buf)
slub.c:4538:static ssize_t destroy_by_rcu_show(struct kmem_cache *s, char *buf)
slub.c:4544:static ssize_t reserved_show(struct kmem_cache *s, char *buf)
slub.c:4551:static ssize_t slabs_show(struct kmem_cache *s, char *buf)
slub.c:4557:static ssize_t total_objects_show(struct kmem_cache *s, char *buf)
slub.c:4563:static ssize_t sanity_checks_show(struct kmem_cache *s, char *buf)
slub.c:4580:static ssize_t trace_show(struct kmem_cache *s, char *buf)
slub.c:4585:static ssize_t trace_store(struct kmem_cache *s, const char *buf, size_t length)
slub.c:4596:static ssize_t red_zone_show(struct kmem_cache *s, char *buf)
slub.c:4601:static ssize_t red_zone_store(struct kmem_cache *s, const char *buf, size_t length)
slub.c:4616:static ssize_t poison_show(struct kmem_cache *s, char *buf)
slub.c:4637:static ssize_t store_user_show(struct kmem_cache *s, char *buf)
slub.c:4642:static ssize_t store_user_store(struct kmem_cache *s, const char *buf, size_t length)
slub.c:4657:static ssize_t validate_show(struct kmem_cache *s, char *buf)
slub.c:4662:static ssize_t validate_store(struct kmem_cache *s, const char *buf, size_t length)
slub.c:4675:static ssize_t alloc_calls_show(struct kmem_cache *s, char *buf)
slub.c:4683:static ssize_t free_calls_show(struct kmem_cache *s, char *buf)
slub.c:4693:static ssize_t failslab_show(struct kmem_cache *s, char *buf)
slub.c:4709:static ssize_t shrink_show(struct kmem_cache *s, char *buf)
slub.c:4729:static ssize_t remote_node_defrag_ratio_show(struct kmem_cache *s, char *buf)
slub.c:4753:static int show_stat(struct kmem_cache *s, char *buf, enum stat_item si)
slub.c:4782:static void clear_stat(struct kmem_cache *s, enum stat_item si)
slub.c:4910:static ssize_t slab_attr_show(struct kobject *kobj, struct attribute *attr, char *buf)
slub.c:4927:static ssize_t slab_attr_store(struct kobject *kobj, struct attribute *attr, const char *buf, size_t len)
slub.c:4976:static void memcg_propagate_slab_attrs(struct kmem_cache *s)
slub.c:5038:static int uevent_filter(struct kset *kset, struct kobject *kobj)
slub.c:5059:static char *create_unique_id(struct kmem_cache *s)
slub.c:5096:static int sysfs_slab_add(struct kmem_cache *s)
slub.c:5140:static void sysfs_slab_remove(struct kmem_cache *s)
slub.c:5166:static int sysfs_slab_alias(struct kmem_cache *s, const char *name)
slub.c:5235:void get_slabinfo(struct kmem_cache *s, struct slabinfo *sinfo)
slub.c:5261:void slabinfo_show_stats(struct seq_file *m, struct kmem_cache *s)
slub.c:5265:ssize_t slabinfo_write(struct file *file, const char __user *buffer, size_t count, loff_t *ppos)
sparse.c:43:int page_to_nid(const struct page *page)
sparse.c:49:static void set_section_nid(unsigned long section_nr, int nid)
sparse.c:54:static inline void set_section_nid(unsigned long section_nr, int nid)
sparse.c:95:static inline int sparse_index_init(unsigned long section_nr, int nid)
sparse.c:106:int __section_nr(struct mem_section* ms)
sparse.c:136:static inline int sparse_early_nid(struct mem_section *section)
sparse.c:223:struct page *sparse_decode_mem_map(unsigned long coded_mem_map, unsigned long pnum)
sparse.c:245:unsigned long usemap_size(void)
sparse.c:598:static void __kfree_section_memmap(struct page *memmap)
sparse.c:606:static void free_map_bootmem(struct page *memmap)
sparse.c:641:static void __kfree_section_memmap(struct page *memmap)
sparse.c:651:static void free_map_bootmem(struct page *memmap)
sparse.c:739:static void clear_hwpoisoned_pages(struct page *memmap, int nr_pages)
sparse.c:754:static inline void clear_hwpoisoned_pages(struct page *memmap, int nr_pages)
sparse.c:759:static void free_section_usemap(struct page *memmap, unsigned long *usemap)
sparse.c:786:void sparse_remove_one_section(struct zone *zone, struct mem_section *ms)
swap.c:53:static void __page_cache_release(struct page *page)
swap.c:69:static void __put_single_page(struct page *page)
swap.c:75:static void __put_compound_page(struct page *page)
swap.c:84:static void put_compound_page(struct page *page)
swap.c:201:void put_page(struct page *page)
swap.c:214:bool __get_page_tail(struct page *page)
swap.c:282:void put_pages_list(struct list_head *pages)
swap.c:307:int get_kernel_pages(const struct kvec *kiov, int nr_segs, int write, struct page **pages)
swap.c:334:int get_kernel_page(unsigned long start, int write, struct page **pages)
swap.c:372:static void pagevec_move_tail_fn(struct page *page, struct lruvec *lruvec, void *arg)
swap.c:387:static void pagevec_move_tail(struct pagevec *pvec)
swap.c:400:void rotate_reclaimable_page(struct page *page)
swap.c:416:static void update_page_reclaim_stat(struct lruvec *lruvec, int file, int rotated)
swap.c:425:static void __activate_page(struct page *page, struct lruvec *lruvec, void *arg)
swap.c:445:static void activate_page_drain(int cpu)
swap.c:453:static bool need_activate_page_drain(int cpu)
swap.c:458:void activate_page(struct page *page)
swap.c:471:static inline void activate_page_drain(int cpu)
swap.c:475:static bool need_activate_page_drain(int cpu)
swap.c:480:void activate_page(struct page *page)
swap.c:490:static void __lru_cache_activate_page(struct page *page)
swap.c:524:void mark_page_accessed(struct page *page)
swap.c:553:void __lru_cache_add(struct page *page)
swap.c:569:void lru_cache_add(struct page *page)
swap.c:586:void add_page_to_unevictable_list(struct page *page)
swap.c:621:static void lru_deactivate_fn(struct page *page, struct lruvec *lruvec, void *arg)
swap.c:671:void lru_add_drain_cpu(int cpu)
swap.c:703:void deactivate_page(struct page *page)
swap.c:721:void lru_add_drain(void)
swap.c:727:static void lru_add_drain_per_cpu(struct work_struct *dummy)
swap.c:734:void lru_add_drain_all(void)
swap.c:777:void release_pages(struct page **pages, int nr, int cold)
swap.c:839:void __pagevec_release(struct pagevec *pvec)
swap.c:907:void __pagevec_lru_add(struct pagevec *pvec)
swap.c:929:unsigned pagevec_lookup(struct pagevec *pvec, struct address_space *mapping, pgoff_t start, unsigned nr_pages)
swap.c:936:unsigned pagevec_lookup_tag(struct pagevec *pvec, struct address_space *mapping, pgoff_t *index, int tag, unsigned nr_pages)
swap_state.c:56:unsigned long total_swapcache_pages(void)
swap_state.c:66:void show_swap_cache_info(void)
swap_state.c:81:int __add_to_swap_cache(struct page *page, swp_entry_t entry)
swap_state.c:121:int add_to_swap_cache(struct page *page, swp_entry_t entry, gfp_t gfp_mask)
swap_state.c:137:void __delete_from_swap_cache(struct page *page)
swap_state.c:163:int add_to_swap(struct page *page, struct list_head *list)
swap_state.c:214:void delete_from_swap_cache(struct page *page)
swap_state.c:238:static inline void free_swap_cache(struct page *page)
swap_state.c:250:void free_page_and_swap_cache(struct page *page)
swap_state.c:260:void free_pages_and_swap_cache(struct page **pages, int nr)
swapfile.c:106:static int discard_swap(struct swap_info_struct *si)
swapfile.c:223:static inline bool cluster_is_free(struct swap_cluster_info *info)
swapfile.c:228:static inline bool cluster_is_null(struct swap_cluster_info *info)
swapfile.c:233:static inline void cluster_set_null(struct swap_cluster_info *info)
swapfile.c:271:static void swap_do_scheduled_discard(struct swap_info_struct *si)
swapfile.c:312:static void swap_discard_work(struct work_struct *work)
swapfile.c:640:swp_entry_t get_swap_page(void)
swapfile.c:711:swp_entry_t get_swap_page_of_type(int type)
swapfile.c:775:static void set_highest_priority_index(int type)
swapfile.c:851:void swap_free(swp_entry_t entry)
swapfile.c:865:void swapcache_free(swp_entry_t entry, struct page *page)
swapfile.c:884:int page_swapcount(struct page *page)
swapfile.c:905:int reuse_swap_page(struct page *page)
swapfile.c:927:int try_to_free_swap(struct page *page)
swapfile.c:965:int free_swap_and_cache(swp_entry_t entry)
swapfile.c:1010:int swap_type_of(dev_t device, sector_t offset, struct block_device **bdev_p)
swapfile.c:1056:sector_t swapdev_block(int type, pgoff_t offset)
swapfile.c:1073:unsigned int count_swap_pages(int type, int free)
swapfile.c:1094:static inline int maybe_same_pte(pte_t pte, pte_t swp_pte)
swapfile.c:1579:static void drain_mmlist(void)
swapfile.c:1599:static sector_t map_swap_entry(swp_entry_t entry, struct block_device **bdev)
swapfile.c:1630:sector_t map_swap_page(struct page *page, struct block_device **bdev)
swapfile.c:1640:static void destroy_swap_extents(struct swap_info_struct *sis)
swapfile.c:1737:static int setup_swap_extents(struct swap_info_struct *sis, sector_t *span)
swapfile.c:1806:static void reinsert_swap_info(struct swap_info_struct *p)
swapfile.c:1963:static unsigned swaps_poll(struct file *file, poll_table *wait)
swapfile.c:1978:static void *swap_start(struct seq_file *swap, loff_t *pos)
swapfile.c:2001:static void *swap_next(struct seq_file *swap, void *v, loff_t *pos)
swapfile.c:2023:static void swap_stop(struct seq_file *swap, void *v)
swapfile.c:2028:static int swap_show(struct seq_file *swap, void *v)
swapfile.c:2058:static int swaps_open(struct inode *inode, struct file *file)
swapfile.c:2143:static int claim_swapfile(struct swap_info_struct *p, struct inode *inode)
swapfile.c:2339:static bool swap_discardable(struct swap_info_struct *si)
swapfile.c:2568:void si_swapinfo(struct sysinfo *val)
swapfile.c:2596:static int __swap_duplicate(swp_entry_t entry, unsigned char usage)
swapfile.c:2671:void swap_shmem_alloc(swp_entry_t entry)
swapfile.c:2683:int swap_duplicate(swp_entry_t entry)
swapfile.c:2700:int swapcache_prepare(swp_entry_t entry)
swapfile.c:2705:struct swap_info_struct *page_swap_info(struct page *page)
swapfile.c:2715:struct address_space *__page_file_mapping(struct page *page)
swapfile.c:2722:pgoff_t __page_file_index(struct page *page)
swapfile.c:2745:int add_swap_count_continuation(swp_entry_t entry, gfp_t gfp_mask)
swapfile.c:2927:static void free_swap_count_continuations(struct swap_info_struct *si)
truncate.c:41:void do_invalidatepage(struct page *page, unsigned int offset, unsigned int length)
truncate.c:68:void cancel_dirty_page(struct page *page, unsigned int account_size)
truncate.c:93:static int truncate_complete_page(struct address_space *mapping, struct page *page)
truncate.c:116:static int invalidate_complete_page(struct address_space *mapping, struct page *page)
truncate.c:131:int truncate_inode_page(struct address_space *mapping, struct page *page)
truncate.c:144:int generic_error_remove_page(struct address_space *mapping, struct page *page)
truncate.c:164:int invalidate_inode_page(struct page *page)
truncate.c:200:void truncate_inode_pages_range(struct address_space *mapping, loff_t lstart, loff_t lend)
truncate.c:352:void truncate_inode_pages(struct address_space *mapping, loff_t lstart)
truncate.c:371:unsigned long invalidate_mapping_pages(struct address_space *mapping, pgoff_t start, pgoff_t end)
truncate.c:428:static int invalidate_complete_page2(struct address_space *mapping, struct page *page)
truncate.c:455:static int do_launder_page(struct address_space *mapping, struct page *page)
truncate.c:475:int invalidate_inode_pages2_range(struct address_space *mapping, pgoff_t start, pgoff_t end)
truncate.c:554:int invalidate_inode_pages2(struct address_space *mapping)
truncate.c:575:void truncate_pagecache(struct inode *inode, loff_t newsize)
truncate.c:607:void truncate_setsize(struct inode *inode, loff_t newsize)
truncate.c:627:void truncate_pagecache_range(struct inode *inode, loff_t lstart, loff_t lend)
util.c:26:char *kstrdup(const char *s, gfp_t gfp)
util.c:48:char *kstrndup(const char *s, size_t max, gfp_t gfp)
util.c:73:void *kmemdup(const void *src, size_t len, gfp_t gfp)
util.c:92:void *memdup_user(const void __user *src, size_t len)
util.c:142:void *__krealloc(const void *p, size_t new_size, gfp_t flags)
util.c:163:void *krealloc(const void *p, size_t new_size, gfp_t flags)
util.c:191:void kzfree(const void *p)
util.c:209:char *strndup_user(const char __user *s, long n)
util.c:233:void __vma_link_list(struct mm_struct *mm, struct vm_area_struct *vma, struct vm_area_struct *prev, struct rb_node *rb_parent)
util.c:254:static int vm_is_stack_for_task(struct task_struct *t, struct vm_area_struct *vma)
util.c:294:void arch_pick_mmap_layout(struct mm_struct *mm)
util.c:351:unsigned long vm_mmap_pgoff(struct file *file, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flag, unsigned long pgoff)
util.c:369:unsigned long vm_mmap(struct file *file, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flag, unsigned long offset)
util.c:380:struct address_space *page_mapping(struct page *page)
util.c:402:unsigned long vm_commit_limit(void)
vmalloc.c:44:static void free_work(struct work_struct *w)
vmalloc.c:57:static void vunmap_pte_range(pmd_t *pmd, unsigned long addr, unsigned long end)
vmalloc.c:68:static void vunmap_pmd_range(pud_t *pud, unsigned long addr, unsigned long end)
vmalloc.c:82:static void vunmap_pud_range(pgd_t *pgd, unsigned long addr, unsigned long end)
vmalloc.c:96:static void vunmap_page_range(unsigned long addr, unsigned long end)
vmalloc.c:208:int is_vmalloc_or_module_addr(const void *x)
vmalloc.c:226:struct page *vmalloc_to_page(const void *vmalloc_addr)
vmalloc.c:260:unsigned long vmalloc_to_pfn(const void *vmalloc_addr)
vmalloc.c:305:static void __insert_vmap_area(struct vmap_area *va)
vmalloc.c:472:static void __free_vmap_area(struct vmap_area *va)
vmalloc.c:510:static void free_vmap_area(struct vmap_area *va)
vmalloc.c:520:static void unmap_vmap_area(struct vmap_area *va)
vmalloc.c:525:static void vmap_debug_free_range(unsigned long start, unsigned long end)
vmalloc.c:580:void set_iounmap_nonlazy(void)
vmalloc.c:652:static void try_purge_vmap_area_lazy(void)
vmalloc.c:662:static void purge_vmap_area_lazy(void)
vmalloc.c:674:static void free_vmap_area_noflush(struct vmap_area *va)
vmalloc.c:686:static void free_unmap_vmap_area_noflush(struct vmap_area *va)
vmalloc.c:695:static void free_unmap_vmap_area(struct vmap_area *va)
vmalloc.c:712:static void free_unmap_vmap_area_addr(unsigned long addr)
vmalloc.c:847:static void free_vmap_block(struct vmap_block *vb)
vmalloc.c:862:static void purge_fragmented_blocks(int cpu)
vmalloc.c:896:static void purge_fragmented_blocks_allcpus(void)
vmalloc.c:904:static void *vb_alloc(unsigned long size, gfp_t gfp_mask)
vmalloc.c:962:static void vb_free(const void *addr, unsigned long size)
vmalloc.c:1011:void vm_unmap_aliases(void)
vmalloc.c:1060:void vm_unmap_ram(const void *mem, unsigned int count)
vmalloc.c:1089:void *vm_map_ram(struct page **pages, unsigned int count, int node, pgprot_t prot)
vmalloc.c:1242:void unmap_kernel_range_noflush(unsigned long addr, unsigned long size)
vmalloc.c:1256:void unmap_kernel_range(unsigned long addr, unsigned long size)
vmalloc.c:1265:int map_vm_area(struct vm_struct *area, pgprot_t prot, struct page ***pages)
vmalloc.c:1294:static void clear_vm_uninitialized_flag(struct vm_struct *vm)
vmalloc.c:1365:struct vm_struct *get_vm_area(unsigned long size, unsigned long flags)
vmalloc.c:1387:struct vm_struct *find_vm_area(const void *addr)
vmalloc.c:1406:struct vm_struct *remove_vm_area(const void *addr)
vmalloc.c:1428:static void __vunmap(const void *addr, int deallocate_pages)
vmalloc.c:1483:void vfree(const void *addr)
vmalloc.c:1510:void vunmap(const void *addr)
vmalloc.c:1692:void *__vmalloc(unsigned long size, gfp_t gfp_mask, pgprot_t prot)
vmalloc.c:1715:void *vmalloc(unsigned long size)
vmalloc.c:1732:void *vzalloc(unsigned long size)
vmalloc.c:1746:void *vmalloc_user(unsigned long size)
vmalloc.c:1774:void *vmalloc_node(unsigned long size, int node)
vmalloc.c:1793:void *vzalloc_node(unsigned long size, int node)
vmalloc.c:1816:void *vmalloc_exec(unsigned long size)
vmalloc.c:1837:void *vmalloc_32(unsigned long size)
vmalloc.c:1851:void *vmalloc_32_user(unsigned long size)
vmalloc.c:1871:static int aligned_vread(char *buf, char *addr, unsigned long count)
vmalloc.c:1910:static int aligned_vwrite(char *buf, char *addr, unsigned long count)
vmalloc.c:1973:long vread(char *buf, char *addr, unsigned long count)
vmalloc.c:2054:long vwrite(char *buf, char *addr, unsigned long count)
vmalloc.c:2191:static int f(pte_t *pte, pgtable_t table, unsigned long addr, void *data)
vmalloc.c:2216:struct vm_struct *alloc_vm_area(size_t size, pte_t **ptes)
vmalloc.c:2239:void free_vm_area(struct vm_struct *area)
vmalloc.c:2517:void pcpu_free_vm_areas(struct vm_struct **vms, int nr_vms)
vmalloc.c:2528:static void *s_start(struct seq_file *m, loff_t *pos)
vmalloc.c:2547:static void *s_next(struct seq_file *m, void *p, loff_t *pos)
vmalloc.c:2559:static void s_stop(struct seq_file *m, void *p)
vmalloc.c:2565:static void show_numa_info(struct seq_file *m, struct vm_struct *v)
vmalloc.c:2589:static int s_show(struct seq_file *m, void *p)
vmalloc.c:2642:static int vmalloc_open(struct inode *inode, struct file *file)
vmalloc.c:2675:void get_vmalloc_info(struct vmalloc_info *vmi)
vmpressure.c:161:static void vmpressure_work_fn(struct work_struct *work)
vmpressure.c:260:void vmpressure_prio(gfp_t gfp, struct mem_cgroup *memcg, int prio)
vmpressure.c:365:void vmpressure_init(struct vmpressure *vmpr)
vmpressure.c:380:void vmpressure_cleanup(struct vmpressure *vmpr)
vmscan.c:139:static bool global_reclaim(struct scan_control *sc)
vmscan.c:144:static bool global_reclaim(struct scan_control *sc)
vmscan.c:150:unsigned long zone_reclaimable_pages(struct zone *zone)
vmscan.c:164:bool zone_reclaimable(struct zone *zone)
vmscan.c:180:int register_shrinker(struct shrinker *shrinker)
vmscan.c:209:void unregister_shrinker(struct shrinker *shrinker)
vmscan.c:374:static inline int is_page_cache_freeable(struct page *page)
vmscan.c:508:static int __remove_mapping(struct address_space *mapping, struct page *page)
vmscan.c:578:int remove_mapping(struct address_space *mapping, struct page *page)
vmscan.c:601:void putback_lru_page(struct page *page)
vmscan.c:1143:int __isolate_lru_page(struct page *page, isolate_mode_t mode)
vmscan.c:1294:int isolate_lru_page(struct page *page)
vmscan.c:1715:static int inactive_anon_is_low_global(struct zone *zone)
vmscan.c:1735:static int inactive_anon_is_low(struct lruvec *lruvec)
vmscan.c:1750:static inline int inactive_anon_is_low(struct lruvec *lruvec)
vmscan.c:1770:static int inactive_file_is_low(struct lruvec *lruvec)
vmscan.c:1781:static int inactive_list_is_low(struct lruvec *lruvec, enum lru_list lru)
vmscan.c:1801:static int vmscan_swappiness(struct scan_control *sc)
vmscan.c:1995:static void shrink_lruvec(struct lruvec *lruvec, struct scan_control *sc)
vmscan.c:2096:static bool in_reclaim_compaction(struct scan_control *sc)
vmscan.c:2170:static void shrink_zone(struct zone *zone, struct scan_control *sc)
vmscan.c:2220:static inline bool compaction_ready(struct zone *zone, struct scan_control *sc)
vmscan.c:2276:static bool shrink_zones(struct zonelist *zonelist, struct scan_control *sc)
vmscan.c:2477:static bool pfmemalloc_watermark_ok(pg_data_t *pgdat)
vmscan.c:2695:static void age_active_anon(struct zone *zone, struct scan_control *sc)
vmscan.c:2748:static bool pgdat_balanced(pg_data_t *pgdat, int order, int classzone_idx)
vmscan.c:3113:static void kswapd_try_to_sleep(pg_data_t *pgdat, int order, int classzone_idx)
vmscan.c:3181:static int kswapd(void *p)
vmscan.c:3277:void wakeup_kswapd(struct zone *zone, int order, enum zone_type classzone_idx)
vmscan.c:3307:unsigned long global_reclaimable_pages(void)
vmscan.c:3330:unsigned long shrink_all_memory(unsigned long nr_to_reclaim)
vmscan.c:3393:int kswapd_run(int nid)
vmscan.c:3416:void kswapd_stop(int nid)
vmscan.c:3487:static long zone_pagecache_reclaimable(struct zone *zone)
vmscan.c:3517:static int __zone_reclaim(struct zone *zone, gfp_t gfp_mask, unsigned int order)
vmscan.c:3598:int zone_reclaim(struct zone *zone, gfp_t gfp_mask, unsigned int order)
vmscan.c:3661:int page_evictable(struct page *page)
vmscan.c:3676:void check_move_unevictable_pages(struct page **pages, int nr_pages)
vmscan.c:3720:static void warn_scan_unevictable_pages(void)
vmscan.c:3772:int scan_unevictable_register_node(struct node *node)
vmscan.c:3777:void scan_unevictable_unregister_node(struct node *node)
vmstat.c:30:static void sum_vm_events(unsigned long *ret)
vmstat.c:50:void all_vm_events(unsigned long *ret)
vmstat.c:64:void vm_events_fold_cpu(int cpu)
vmstat.c:87:int calculate_pressure_threshold(struct zone *zone)
vmstat.c:111:int calculate_normal_threshold(struct zone *zone)
vmstat.c:161:void refresh_zone_stat_thresholds(void)
vmstat.c:255:void __inc_zone_state(struct zone *zone, enum zone_stat_item item)
vmstat.c:271:void __inc_zone_page_state(struct page *page, enum zone_stat_item item)
vmstat.c:277:void __dec_zone_state(struct zone *zone, enum zone_stat_item item)
vmstat.c:293:void __dec_zone_page_state(struct page *page, enum zone_stat_item item)
vmstat.c:357:void inc_zone_state(struct zone *zone, enum zone_stat_item item)
vmstat.c:362:void inc_zone_page_state(struct page *page, enum zone_stat_item item)
vmstat.c:368:void dec_zone_page_state(struct page *page, enum zone_stat_item item)
vmstat.c:388:void inc_zone_state(struct zone *zone, enum zone_stat_item item)
vmstat.c:397:void inc_zone_page_state(struct page *page, enum zone_stat_item item)
vmstat.c:409:void dec_zone_page_state(struct page *page, enum zone_stat_item item)
vmstat.c:420:static inline void fold_diff(int *diff)
vmstat.c:443:static void refresh_cpu_vm_stats(void)
vmstat.c:503:void cpu_vm_stats_fold(int cpu)
vmstat.c:532:void drain_zonestat(struct zone *zone, struct per_cpu_pageset *pset)
vmstat.c:557:void zone_statistics(struct zone *preferred_zone, struct zone *z, gfp_t flags)
vmstat.c:623:static int __fragmentation_index(unsigned int order, struct contig_page_info *info)
vmstat.c:644:int fragmentation_index(struct zone *zone, unsigned int order)
vmstat.c:670:static void *frag_start(struct seq_file *m, loff_t *pos)
vmstat.c:682:static void *frag_next(struct seq_file *m, void *arg, loff_t *pos)
vmstat.c:690:static void frag_stop(struct seq_file *m, void *arg)
vmstat.c:881:static int frag_show(struct seq_file *m, void *arg)
vmstat.c:914:static int pagetypeinfo_showfree(struct seq_file *m, void *arg)
vmstat.c:965:static int pagetypeinfo_showblockcount(struct seq_file *m, void *arg)
vmstat.c:983:static int pagetypeinfo_show(struct seq_file *m, void *arg)
vmstat.c:1007:static int fragmentation_open(struct inode *inode, struct file *file)
vmstat.c:1026:static int pagetypeinfo_open(struct inode *inode, struct file *file)
vmstat.c:1104:static int zoneinfo_show(struct seq_file *m, void *arg)
vmstat.c:1119:static int zoneinfo_open(struct inode *inode, struct file *file)
vmstat.c:1137:static void *vmstat_start(struct seq_file *m, loff_t *pos)
vmstat.c:1171:static void *vmstat_next(struct seq_file *m, void *arg, loff_t *pos)
vmstat.c:1179:static int vmstat_show(struct seq_file *m, void *arg)
vmstat.c:1188:static void vmstat_stop(struct seq_file *m, void *arg)
vmstat.c:1201:static int vmstat_open(struct inode *inode, struct file *file)
vmstat.c:1218:static void vmstat_update(struct work_struct *w)
vmstat.c:1225:static void start_cpu_timer(int cpu)
vmstat.c:1233:static void vmstat_cpu_dead(int node)
vmstat.c:1366:static int unusable_show(struct seq_file *m, void *arg)
vmstat.c:1386:static int unusable_open(struct inode *inode, struct file *file)
vmstat.c:1422:static int extfrag_show(struct seq_file *m, void *arg)
vmstat.c:1438:static int extfrag_open(struct inode *inode, struct file *file)
zbud.c:125:static int size_to_chunks(int size)
zbud.c:146:static void free_zbud_page(struct zbud_header *zhdr)
zbud.c:181:static int num_free_chunks(struct zbud_header *zhdr)
zbud.c:202:struct zbud_pool *zbud_create_pool(gfp_t gfp, struct zbud_ops *ops)
zbud.c:226:void zbud_destroy_pool(struct zbud_pool *pool)
zbud.c:326:void zbud_free(struct zbud_pool *pool, unsigned long handle)
zbud.c:401:int zbud_reclaim_page(struct zbud_pool *pool, unsigned int retries)
zbud.c:483:void *zbud_map(struct zbud_pool *pool, unsigned long handle)
zbud.c:493:void zbud_unmap(struct zbud_pool *pool, unsigned long handle)
zbud.c:504:u64 zbud_get_pool_size(struct zbud_pool *pool)
zswap.c:144:static void zswap_comp_exit(void)
zswap.c:202:static int zswap_entry_cache_create(void)
zswap.c:208:static void zswap_entry_cache_destory(void)
zswap.c:224:static void zswap_entry_cache_free(struct zswap_entry *entry)
zswap.c:276:static void zswap_rb_erase(struct rb_root *root, struct zswap_entry *entry)
zswap.c:298:static void zswap_entry_get(struct zswap_entry *entry)
zswap.c:336:static int __zswap_cpu_notifier(unsigned long action, unsigned long cpu)
zswap.c:386:static int zswap_cpu_init(void)
zswap.c:408:static bool zswap_is_full(void)
zswap.c:527:static int zswap_writeback_entry(struct zbud_pool *pool, unsigned long handle)
zswap.c:772:static void zswap_frontswap_invalidate_page(unsigned type, pgoff_t offset)
zswap.c:796:static void zswap_frontswap_invalidate_area(unsigned type)
zswap.c:820:static void zswap_frontswap_init(unsigned type)
